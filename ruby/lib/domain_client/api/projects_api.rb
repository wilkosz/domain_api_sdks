=begin
#Domain Group API V1

#Provides public access to Domain's microservices

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.9

=end

require 'uri'

module DomainClient
  class ProjectsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Retrieves a specific project
    # @param id Project Id
    # @param [Hash] opts the optional parameters
    # @return [DomainListingsServiceV2ModelDomainListingsApiModelQueryResultsProjectsProjectV2]
    def projects_get(id, opts = {})
      data, _status_code, _headers = projects_get_with_http_info(id, opts)
      data
    end

    # Retrieves a specific project
    # @param id Project Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainListingsServiceV2ModelDomainListingsApiModelQueryResultsProjectsProjectV2, Fixnum, Hash)>] DomainListingsServiceV2ModelDomainListingsApiModelQueryResultsProjectsProjectV2 data, response status code and response headers
    def projects_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.projects_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProjectsApi.projects_get"
      end
      # resource path
      local_var_path = '/v1/projects/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DomainListingsServiceV2ModelDomainListingsApiModelQueryResultsProjectsProjectV2')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#projects_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieves listings of a project
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<DomainPublicAdapterWebApiModelsV1ListingsListing>]
    def projects_get_child_listings(id, opts = {})
      data, _status_code, _headers = projects_get_child_listings_with_http_info(id, opts)
      data
    end

    # Retrieves listings of a project
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<DomainPublicAdapterWebApiModelsV1ListingsListing>, Fixnum, Hash)>] Array<DomainPublicAdapterWebApiModelsV1ListingsListing> data, response status code and response headers
    def projects_get_child_listings_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.projects_get_child_listings ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProjectsApi.projects_get_child_listings"
      end
      # resource path
      local_var_path = '/v1/projects/{id}/listings'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<DomainPublicAdapterWebApiModelsV1ListingsListing>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#projects_get_child_listings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Searches projects
    # Note that the result page size is clamped at 100.  Requesting a page size greater than this will be treated as if only a page size of 100 were requested.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :agency_id Restricts to the provided agency
    # @option opts [Integer] :page_number Page number for paginated results
    # @option opts [Integer] :page_size Page size for paginated results
    # @return [Array<DomainListingsServiceV2ModelDomainListingsApiModelQueryResultsProjectsProjectV2>]
    def projects_search(opts = {})
      data, _status_code, _headers = projects_search_with_http_info(opts)
      data
    end

    # Searches projects
    # Note that the result page size is clamped at 100.  Requesting a page size greater than this will be treated as if only a page size of 100 were requested.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :agency_id Restricts to the provided agency
    # @option opts [Integer] :page_number Page number for paginated results
    # @option opts [Integer] :page_size Page size for paginated results
    # @return [Array<(Array<DomainListingsServiceV2ModelDomainListingsApiModelQueryResultsProjectsProjectV2>, Fixnum, Hash)>] Array<DomainListingsServiceV2ModelDomainListingsApiModelQueryResultsProjectsProjectV2> data, response status code and response headers
    def projects_search_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.projects_search ...'
      end
      # resource path
      local_var_path = '/v1/projects'

      # query parameters
      query_params = {}
      query_params[:'agencyId'] = opts[:'agency_id'] if !opts[:'agency_id'].nil?
      query_params[:'pageNumber'] = opts[:'page_number'] if !opts[:'page_number'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<DomainListingsServiceV2ModelDomainListingsApiModelQueryResultsProjectsProjectV2>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#projects_search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
