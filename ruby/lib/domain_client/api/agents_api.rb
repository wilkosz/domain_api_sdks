=begin
#Domain Group API V1

#Provides public access to Domain's microservices

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.9

=end

require 'uri'

module DomainClient
  class AgentsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Retrieves a specific agent details, including contact information.
    # @param id Agent identifier
    # @param [Hash] opts the optional parameters
    # @return [DomainAgencyServiceV1ModelAgentDto]
    def agents_get(id, opts = {})
      data, _status_code, _headers = agents_get_with_http_info(id, opts)
      data
    end

    # Retrieves a specific agent details, including contact information.
    # @param id Agent identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainAgencyServiceV1ModelAgentDto, Fixnum, Hash)>] DomainAgencyServiceV1ModelAgentDto data, response status code and response headers
    def agents_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AgentsApi.agents_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AgentsApi.agents_get"
      end
      # resource path
      local_var_path = '/v1/agents/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DomainAgencyServiceV1ModelAgentDto')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AgentsApi#agents_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Gets listing using the contact id
    # @param id Agent identifier
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :date_updated_since Filter to remove listings not updated since before the given date time
    # @option opts [BOOLEAN] :included_archived_listings Filter to remove listings that have been archived
    # @option opts [Integer] :page_number Page number for paginated results
    # @option opts [Integer] :page_size Page size for paginated results
    # @return [Array<DomainPublicAdapterWebApiModelsV1ListingsListing>]
    def agents_get_listings(id, opts = {})
      data, _status_code, _headers = agents_get_listings_with_http_info(id, opts)
      data
    end

    # Gets listing using the contact id
    # @param id Agent identifier
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :date_updated_since Filter to remove listings not updated since before the given date time
    # @option opts [BOOLEAN] :included_archived_listings Filter to remove listings that have been archived
    # @option opts [Integer] :page_number Page number for paginated results
    # @option opts [Integer] :page_size Page size for paginated results
    # @return [Array<(Array<DomainPublicAdapterWebApiModelsV1ListingsListing>, Fixnum, Hash)>] Array<DomainPublicAdapterWebApiModelsV1ListingsListing> data, response status code and response headers
    def agents_get_listings_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AgentsApi.agents_get_listings ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AgentsApi.agents_get_listings"
      end
      # resource path
      local_var_path = '/v1/agents/{id}/listings'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'dateUpdatedSince'] = opts[:'date_updated_since'] if !opts[:'date_updated_since'].nil?
      query_params[:'includedArchivedListings'] = opts[:'included_archived_listings'] if !opts[:'included_archived_listings'].nil?
      query_params[:'pageNumber'] = opts[:'page_number'] if !opts[:'page_number'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<DomainPublicAdapterWebApiModelsV1ListingsListing>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AgentsApi#agents_get_listings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Search for agents by name.
    # The returned Agent ID can be used to get an agent details by ID. See `GET /agents/{id}/`
    # @param query The name, or portion of name, to search for.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_number Page number for paginated results
    # @option opts [Integer] :page_size Page size for paginated results (maximum 20)
    # @return [Array<DomainAgentSearchV1ModelAutoSuggestAgentResultDto>]
    def agents_search(query, opts = {})
      data, _status_code, _headers = agents_search_with_http_info(query, opts)
      data
    end

    # Search for agents by name.
    # The returned Agent ID can be used to get an agent details by ID. See &#x60;GET /agents/{id}/&#x60;
    # @param query The name, or portion of name, to search for.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_number Page number for paginated results
    # @option opts [Integer] :page_size Page size for paginated results (maximum 20)
    # @return [Array<(Array<DomainAgentSearchV1ModelAutoSuggestAgentResultDto>, Fixnum, Hash)>] Array<DomainAgentSearchV1ModelAutoSuggestAgentResultDto> data, response status code and response headers
    def agents_search_with_http_info(query, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AgentsApi.agents_search ...'
      end
      # verify the required parameter 'query' is set
      if @api_client.config.client_side_validation && query.nil?
        fail ArgumentError, "Missing the required parameter 'query' when calling AgentsApi.agents_search"
      end
      # resource path
      local_var_path = '/v1/agents/search'

      # query parameters
      query_params = {}
      query_params[:'query'] = query
      query_params[:'pageNumber'] = opts[:'page_number'] if !opts[:'page_number'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<DomainAgentSearchV1ModelAutoSuggestAgentResultDto>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AgentsApi#agents_search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
