=begin
#Domain Group API V1

#Provides public access to Domain's microservices

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.9

=end

require 'uri'

module DomainClient
  class AgenciesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Creates a test agency
    # Enables automatic creation of a test agency in our sandbox environment.
    # @param [Hash] opts the optional parameters
    # @return [DomainAgencyServiceV2ModelAgency]
    def agencies_create_test_agency(opts = {})
      data, _status_code, _headers = agencies_create_test_agency_with_http_info(opts)
      data
    end

    # Creates a test agency
    # Enables automatic creation of a test agency in our sandbox environment.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainAgencyServiceV2ModelAgency, Fixnum, Hash)>] DomainAgencyServiceV2ModelAgency data, response status code and response headers
    def agencies_create_test_agency_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AgenciesApi.agencies_create_test_agency ...'
      end
      # resource path
      local_var_path = '/v1/agencies/_testAgency'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DomainAgencyServiceV2ModelAgency')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AgenciesApi#agencies_create_test_agency\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieves a specific agency details.
    # @param id Agency identifier
    # @param [Hash] opts the optional parameters
    # @return [DomainAgencyServiceV2ModelAgency]
    def agencies_get(id, opts = {})
      data, _status_code, _headers = agencies_get_with_http_info(id, opts)
      data
    end

    # Retrieves a specific agency details.
    # @param id Agency identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainAgencyServiceV2ModelAgency, Fixnum, Hash)>] DomainAgencyServiceV2ModelAgency data, response status code and response headers
    def agencies_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AgenciesApi.agencies_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AgenciesApi.agencies_get"
      end
      # resource path
      local_var_path = '/v1/agencies/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DomainAgencyServiceV2ModelAgency')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AgenciesApi#agencies_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieves the product bundle contracts applicable to the specific agency.
    # @param id Agency identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<DomainBookingServiceV1ModelProductBundleContractDetailsResponse>]
    def agencies_get_bundle_contracts(id, opts = {})
      data, _status_code, _headers = agencies_get_bundle_contracts_with_http_info(id, opts)
      data
    end

    # Retrieves the product bundle contracts applicable to the specific agency.
    # @param id Agency identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<DomainBookingServiceV1ModelProductBundleContractDetailsResponse>, Fixnum, Hash)>] Array<DomainBookingServiceV1ModelProductBundleContractDetailsResponse> data, response status code and response headers
    def agencies_get_bundle_contracts_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AgenciesApi.agencies_get_bundle_contracts ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AgenciesApi.agencies_get_bundle_contracts"
      end
      # resource path
      local_var_path = '/v1/agencies/{id}/bundlecontracts'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<DomainBookingServiceV1ModelProductBundleContractDetailsResponse>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AgenciesApi#agencies_get_bundle_contracts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieves listings across all channels for a specific agency matching specified criteria.
    # Note that the result page size is clamped at 200.  Requesting a page size greater than this will be treated as if only a page size of 200 were requested.
    # @param id Agency identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :listing_status_filter Filter for listing status
    # @option opts [DateTime] :date_updated_since Filter to remove listings not updated since before the given date time
    # @option opts [Integer] :page_number Page number for paginated results
    # @option opts [Integer] :page_size Page size for paginated results
    # @return [Array<DomainPublicAdapterWebApiModelsV1ListingsListing>]
    def agencies_get_listings(id, opts = {})
      data, _status_code, _headers = agencies_get_listings_with_http_info(id, opts)
      data
    end

    # Retrieves listings across all channels for a specific agency matching specified criteria.
    # Note that the result page size is clamped at 200.  Requesting a page size greater than this will be treated as if only a page size of 200 were requested.
    # @param id Agency identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :listing_status_filter Filter for listing status
    # @option opts [DateTime] :date_updated_since Filter to remove listings not updated since before the given date time
    # @option opts [Integer] :page_number Page number for paginated results
    # @option opts [Integer] :page_size Page size for paginated results
    # @return [Array<(Array<DomainPublicAdapterWebApiModelsV1ListingsListing>, Fixnum, Hash)>] Array<DomainPublicAdapterWebApiModelsV1ListingsListing> data, response status code and response headers
    def agencies_get_listings_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AgenciesApi.agencies_get_listings ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AgenciesApi.agencies_get_listings"
      end
      if @api_client.config.client_side_validation && opts[:'listing_status_filter'] && !['live', 'liveAndArchived'].include?(opts[:'listing_status_filter'])
        fail ArgumentError, 'invalid value for "listing_status_filter", must be one of live, liveAndArchived'
      end
      # resource path
      local_var_path = '/v1/agencies/{id}/listings'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'listingStatusFilter'] = opts[:'listing_status_filter'] if !opts[:'listing_status_filter'].nil?
      query_params[:'dateUpdatedSince'] = opts[:'date_updated_since'] if !opts[:'date_updated_since'].nil?
      query_params[:'pageNumber'] = opts[:'page_number'] if !opts[:'page_number'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<DomainPublicAdapterWebApiModelsV1ListingsListing>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AgenciesApi#agencies_get_listings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieves statistics across all channels for a specific agency.
    # @param id Agency identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :time_period Period to report on, Valid values are: &#x60;last7Days&#x60;, &#x60;last90Days&#x60;, &#x60;wholeCampaign&#x60;. Default is &#x60;last7Days&#x60;.
    # @option opts [String] :status_filter Status to filter, Valid values are: &#x60;Live&#x60;, &#x60;LiveAndArchived&#x60;. Default is &#x60;LiveAndArchived&#x60;
    # @option opts [Integer] :page_number Page number
    # @option opts [Integer] :page_size Page size
    # @return [Array<DomainPublicAdapterWebApiModelsV1ListingsStatistics>]
    def agencies_get_statistics(id, opts = {})
      data, _status_code, _headers = agencies_get_statistics_with_http_info(id, opts)
      data
    end

    # Retrieves statistics across all channels for a specific agency.
    # @param id Agency identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :time_period Period to report on, Valid values are: &#x60;last7Days&#x60;, &#x60;last90Days&#x60;, &#x60;wholeCampaign&#x60;. Default is &#x60;last7Days&#x60;.
    # @option opts [String] :status_filter Status to filter, Valid values are: &#x60;Live&#x60;, &#x60;LiveAndArchived&#x60;. Default is &#x60;LiveAndArchived&#x60;
    # @option opts [Integer] :page_number Page number
    # @option opts [Integer] :page_size Page size
    # @return [Array<(Array<DomainPublicAdapterWebApiModelsV1ListingsStatistics>, Fixnum, Hash)>] Array<DomainPublicAdapterWebApiModelsV1ListingsStatistics> data, response status code and response headers
    def agencies_get_statistics_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AgenciesApi.agencies_get_statistics ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AgenciesApi.agencies_get_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'time_period'] && !['last7Days', 'last90Days', 'wholeCampaign'].include?(opts[:'time_period'])
        fail ArgumentError, 'invalid value for "time_period", must be one of last7Days, last90Days, wholeCampaign'
      end
      if @api_client.config.client_side_validation && opts[:'status_filter'] && !['live', 'liveAndArchived'].include?(opts[:'status_filter'])
        fail ArgumentError, 'invalid value for "status_filter", must be one of live, liveAndArchived'
      end
      # resource path
      local_var_path = '/v1/agencies/{id}/statistics'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'timePeriod'] = opts[:'time_period'] if !opts[:'time_period'].nil?
      query_params[:'statusFilter'] = opts[:'status_filter'] if !opts[:'status_filter'].nil?
      query_params[:'pageNumber'] = opts[:'page_number'] if !opts[:'page_number'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<DomainPublicAdapterWebApiModelsV1ListingsStatistics>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AgenciesApi#agencies_get_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieves the active subscriptions for the specific agency
    # @param id Agency identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :channel Channel. Either &#x60;residential&#x60; or &#x60;commercial&#x60; (case insensitive). Defaults to &#x60;residential&#x60; if not provided
    # @return [Array<DomainAgencyServiceV1ModelAgencySubscriptionDto>]
    def agencies_get_subscriptions(id, opts = {})
      data, _status_code, _headers = agencies_get_subscriptions_with_http_info(id, opts)
      data
    end

    # Retrieves the active subscriptions for the specific agency
    # @param id Agency identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :channel Channel. Either &#x60;residential&#x60; or &#x60;commercial&#x60; (case insensitive). Defaults to &#x60;residential&#x60; if not provided
    # @return [Array<(Array<DomainAgencyServiceV1ModelAgencySubscriptionDto>, Fixnum, Hash)>] Array<DomainAgencyServiceV1ModelAgencySubscriptionDto> data, response status code and response headers
    def agencies_get_subscriptions_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AgenciesApi.agencies_get_subscriptions ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AgenciesApi.agencies_get_subscriptions"
      end
      # resource path
      local_var_path = '/v1/agencies/{id}/subscriptions'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'channel'] = opts[:'channel'] if !opts[:'channel'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<DomainAgencyServiceV1ModelAgencySubscriptionDto>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AgenciesApi#agencies_get_subscriptions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieves summary of agency search
    # Given a specified agency search criteria, this endpoint can be used to ascertain the result count that can be expected.
    # @param q Search phrase.  e.g. name:\&quot;Agency XYZ\&quot;
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_number Page number for paginated results
    # @option opts [Integer] :page_size Page size for paginated results
    # @return [nil]
    def agencies_head(q, opts = {})
      agencies_head_with_http_info(q, opts)
      nil
    end

    # Retrieves summary of agency search
    # Given a specified agency search criteria, this endpoint can be used to ascertain the result count that can be expected.
    # @param q Search phrase.  e.g. name:\&quot;Agency XYZ\&quot;
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_number Page number for paginated results
    # @option opts [Integer] :page_size Page size for paginated results
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def agencies_head_with_http_info(q, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AgenciesApi.agencies_head ...'
      end
      # verify the required parameter 'q' is set
      if @api_client.config.client_side_validation && q.nil?
        fail ArgumentError, "Missing the required parameter 'q' when calling AgenciesApi.agencies_head"
      end
      # resource path
      local_var_path = '/v1/agencies'

      # query parameters
      query_params = {}
      query_params[:'q'] = q
      query_params[:'pageNumber'] = opts[:'page_number'] if !opts[:'page_number'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:HEAD, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AgenciesApi#agencies_head\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieves summary of agencies matching the specified criteria.
    # <para>The <code>q</code> parameter supports:</para>  <ul>    <li>name: search by name eg. <code>name:\"Agency XYZ\"</code></li>    <li>providerId: search by providerId. eg. <code>providerId:\"ABC Software\"</code></li>    <li>domainUrl: search by domainUrl. eg. <code>domainUrl:\"agency-xyz\"</code></li>    <li>dateUpdated: search by dateUpdated. eg. <code>dateUpdated:\"2016-12-25\"</code></li>    <li>suburbId: search by suburbId. Lists supported.  eg. <code>suburbId:1</code> eg. <code>suburbId:(1 OR 2 OR 3)</code>.  Can include related suburbs by adding <code>in:related</code></li>    <li>accountType: search by account type. Lists supported.  eg. <code>accountType:residential</code> eg. <code>accountType:(residential OR commercial)</code> Valid values are: none, residential, commerciallight, commercialfull, developer, holiday, business</li>    <li>      <code>in:all</code> includes archived agencies (archived agencies excluded by default)</li>    <li>      <code>-is:selfservice</code> excludes selfservice</li>  </ul>
    # @param q Search phrase.  e.g. name:\&quot;Agency XYZ\&quot;
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_number Page number for paginated results
    # @option opts [Integer] :page_size Page size for paginated results
    # @return [Array<DomainAgencyServiceV2ModelAgencySummary>]
    def agencies_search(q, opts = {})
      data, _status_code, _headers = agencies_search_with_http_info(q, opts)
      data
    end

    # Retrieves summary of agencies matching the specified criteria.
    # &lt;para&gt;The &lt;code&gt;q&lt;/code&gt; parameter supports:&lt;/para&gt;  &lt;ul&gt;    &lt;li&gt;name: search by name eg. &lt;code&gt;name:\&quot;Agency XYZ\&quot;&lt;/code&gt;&lt;/li&gt;    &lt;li&gt;providerId: search by providerId. eg. &lt;code&gt;providerId:\&quot;ABC Software\&quot;&lt;/code&gt;&lt;/li&gt;    &lt;li&gt;domainUrl: search by domainUrl. eg. &lt;code&gt;domainUrl:\&quot;agency-xyz\&quot;&lt;/code&gt;&lt;/li&gt;    &lt;li&gt;dateUpdated: search by dateUpdated. eg. &lt;code&gt;dateUpdated:\&quot;2016-12-25\&quot;&lt;/code&gt;&lt;/li&gt;    &lt;li&gt;suburbId: search by suburbId. Lists supported.  eg. &lt;code&gt;suburbId:1&lt;/code&gt; eg. &lt;code&gt;suburbId:(1 OR 2 OR 3)&lt;/code&gt;.  Can include related suburbs by adding &lt;code&gt;in:related&lt;/code&gt;&lt;/li&gt;    &lt;li&gt;accountType: search by account type. Lists supported.  eg. &lt;code&gt;accountType:residential&lt;/code&gt; eg. &lt;code&gt;accountType:(residential OR commercial)&lt;/code&gt; Valid values are: none, residential, commerciallight, commercialfull, developer, holiday, business&lt;/li&gt;    &lt;li&gt;      &lt;code&gt;in:all&lt;/code&gt; includes archived agencies (archived agencies excluded by default)&lt;/li&gt;    &lt;li&gt;      &lt;code&gt;-is:selfservice&lt;/code&gt; excludes selfservice&lt;/li&gt;  &lt;/ul&gt;
    # @param q Search phrase.  e.g. name:\&quot;Agency XYZ\&quot;
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_number Page number for paginated results
    # @option opts [Integer] :page_size Page size for paginated results
    # @return [Array<(Array<DomainAgencyServiceV2ModelAgencySummary>, Fixnum, Hash)>] Array<DomainAgencyServiceV2ModelAgencySummary> data, response status code and response headers
    def agencies_search_with_http_info(q, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AgenciesApi.agencies_search ...'
      end
      # verify the required parameter 'q' is set
      if @api_client.config.client_side_validation && q.nil?
        fail ArgumentError, "Missing the required parameter 'q' when calling AgenciesApi.agencies_search"
      end
      # resource path
      local_var_path = '/v1/agencies'

      # query parameters
      query_params = {}
      query_params[:'q'] = q
      query_params[:'pageNumber'] = opts[:'page_number'] if !opts[:'page_number'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<DomainAgencyServiceV2ModelAgencySummary>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AgenciesApi#agencies_search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
