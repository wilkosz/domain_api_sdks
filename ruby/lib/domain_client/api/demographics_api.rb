=begin
#Domain Group API V1

#Provides public access to Domain's microservices

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.9

=end

require 'uri'

module DomainClient
  class DemographicsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Retrieves demographic information
    # @param level Geographic level.  Valid values are: &#x60;Postcode&#x60;, &#x60;Suburb&#x60;
    # @param id Location identifier. If the geographic level is Suburb this is a Suburb ID value, if the geographic level is postcode this is a Postcode ID value.  See the &#x60;/addressLocators&#x60; endpoint.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :types Comma separated list of demographic data requested. If not provided, all data will be returned. Valid values are: &#x60;AgeGroupOfPopulation&#x60;, &#x60;CountryOfBirth&#x60;, &#x60;NatureOfOccupancy&#x60;, &#x60;GeographicalPopulation&#x60;, &#x60;DwellingStructure&#x60;, &#x60;HousingLoanRepayment&#x60;, &#x60;MaritalStatus&#x60;, &#x60;Religion&#x60;, &#x60;Occupation&#x60;, &#x60;EducationAttendance&#x60;, &#x60;TransportToWork&#x60;
    # @option opts [String] :year Year of the source data.  Valid values are: &#x60;2011&#x60;, &#x60;2016&#x60;
    # @return [DomainDemographicsServiceV1ModelDemographicsResultsModel]
    def demographics_get(level, id, opts = {})
      data, _status_code, _headers = demographics_get_with_http_info(level, id, opts)
      data
    end

    # Retrieves demographic information
    # @param level Geographic level.  Valid values are: &#x60;Postcode&#x60;, &#x60;Suburb&#x60;
    # @param id Location identifier. If the geographic level is Suburb this is a Suburb ID value, if the geographic level is postcode this is a Postcode ID value.  See the &#x60;/addressLocators&#x60; endpoint.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :types Comma separated list of demographic data requested. If not provided, all data will be returned. Valid values are: &#x60;AgeGroupOfPopulation&#x60;, &#x60;CountryOfBirth&#x60;, &#x60;NatureOfOccupancy&#x60;, &#x60;GeographicalPopulation&#x60;, &#x60;DwellingStructure&#x60;, &#x60;HousingLoanRepayment&#x60;, &#x60;MaritalStatus&#x60;, &#x60;Religion&#x60;, &#x60;Occupation&#x60;, &#x60;EducationAttendance&#x60;, &#x60;TransportToWork&#x60;
    # @option opts [String] :year Year of the source data.  Valid values are: &#x60;2011&#x60;, &#x60;2016&#x60;
    # @return [Array<(DomainDemographicsServiceV1ModelDemographicsResultsModel, Fixnum, Hash)>] DomainDemographicsServiceV1ModelDemographicsResultsModel data, response status code and response headers
    def demographics_get_with_http_info(level, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DemographicsApi.demographics_get ...'
      end
      # verify the required parameter 'level' is set
      if @api_client.config.client_side_validation && level.nil?
        fail ArgumentError, "Missing the required parameter 'level' when calling DemographicsApi.demographics_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DemographicsApi.demographics_get"
      end
      # resource path
      local_var_path = '/v1/demographics'

      # query parameters
      query_params = {}
      query_params[:'level'] = level
      query_params[:'id'] = id
      query_params[:'types'] = opts[:'types'] if !opts[:'types'].nil?
      query_params[:'year'] = opts[:'year'] if !opts[:'year'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DomainDemographicsServiceV1ModelDemographicsResultsModel')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DemographicsApi#demographics_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
