=begin
#Domain Group API V1

#Provides public access to Domain's microservices

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.9

=end

require 'uri'

module DomainClient
  class SchoolsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Retrieves a specific school
    # @param id School identifier
    # @param [Hash] opts the optional parameters
    # @return [DomainPublicAdapterWebApiModelsV1LocationsSchoolsSchool]
    def schools_get(id, opts = {})
      data, _status_code, _headers = schools_get_with_http_info(id, opts)
      data
    end

    # Retrieves a specific school
    # @param id School identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainPublicAdapterWebApiModelsV1LocationsSchoolsSchool, Fixnum, Hash)>] DomainPublicAdapterWebApiModelsV1LocationsSchoolsSchool data, response status code and response headers
    def schools_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SchoolsApi.schools_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SchoolsApi.schools_get"
      end
      # resource path
      local_var_path = '/v1/locations/schools/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DomainPublicAdapterWebApiModelsV1LocationsSchoolsSchool')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SchoolsApi#schools_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Searches schools based on specified criteria
    # @param [Hash] opts the optional parameters
    # @option opts [String] :coordinate Filter schools to include the specified coordinate in their catchment area (lat,long)
    # @return [Array<DomainPublicAdapterWebApiModelsV1LocationsSchoolsSchool>]
    def schools_search(opts = {})
      data, _status_code, _headers = schools_search_with_http_info(opts)
      data
    end

    # Searches schools based on specified criteria
    # @param [Hash] opts the optional parameters
    # @option opts [String] :coordinate Filter schools to include the specified coordinate in their catchment area (lat,long)
    # @return [Array<(Array<DomainPublicAdapterWebApiModelsV1LocationsSchoolsSchool>, Fixnum, Hash)>] Array<DomainPublicAdapterWebApiModelsV1LocationsSchoolsSchool> data, response status code and response headers
    def schools_search_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SchoolsApi.schools_search ...'
      end
      # resource path
      local_var_path = '/v1/locations/schools'

      # query parameters
      query_params = {}
      query_params[:'coordinate'] = opts[:'coordinate'] if !opts[:'coordinate'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<DomainPublicAdapterWebApiModelsV1LocationsSchoolsSchool>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SchoolsApi#schools_search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
