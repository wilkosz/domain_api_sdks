=begin
#Domain Group API V1

#Provides public access to Domain's microservices

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.9

=end

require 'uri'

module DomainClient
  class PropertyReportsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Retrieves a property report based on query parameters
    # @param property_type Type of property &#x60;House&#x60;, &#x60;Unit&#x60;
    # @param street_number Street number
    # @param street_name Street name
    # @param suburb Suburb e.g. &#x60;Pyrmont&#x60;
    # @param state State e.g. &#x60;NSW&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :unit_number Unit number
    # @option opts [String] :street_type Street type e.g. &#x60;Pl&#x60;
    # @option opts [String] :postcode Postcode e.g. &#x60;2009&#x60;
    # @option opts [Integer] :area_size Area size
    # @option opts [Integer] :bedrooms Number of bedrooms
    # @option opts [Integer] :bathrooms Number of bathrooms
    # @option opts [Integer] :parking Number of parking spots
    # @option opts [String] :prepared_for \&quot;Prepared for\&quot; information
    # @option opts [String] :product_code Report product code
    # @return [DomainPropertyReportServiceV1ModelPropertyReportGenerationResult]
    def property_reports_get(property_type, street_number, street_name, suburb, state, opts = {})
      data, _status_code, _headers = property_reports_get_with_http_info(property_type, street_number, street_name, suburb, state, opts)
      data
    end

    # Retrieves a property report based on query parameters
    # @param property_type Type of property &#x60;House&#x60;, &#x60;Unit&#x60;
    # @param street_number Street number
    # @param street_name Street name
    # @param suburb Suburb e.g. &#x60;Pyrmont&#x60;
    # @param state State e.g. &#x60;NSW&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :unit_number Unit number
    # @option opts [String] :street_type Street type e.g. &#x60;Pl&#x60;
    # @option opts [String] :postcode Postcode e.g. &#x60;2009&#x60;
    # @option opts [Integer] :area_size Area size
    # @option opts [Integer] :bedrooms Number of bedrooms
    # @option opts [Integer] :bathrooms Number of bathrooms
    # @option opts [Integer] :parking Number of parking spots
    # @option opts [String] :prepared_for \&quot;Prepared for\&quot; information
    # @option opts [String] :product_code Report product code
    # @return [Array<(DomainPropertyReportServiceV1ModelPropertyReportGenerationResult, Fixnum, Hash)>] DomainPropertyReportServiceV1ModelPropertyReportGenerationResult data, response status code and response headers
    def property_reports_get_with_http_info(property_type, street_number, street_name, suburb, state, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PropertyReportsApi.property_reports_get ...'
      end
      # verify the required parameter 'property_type' is set
      if @api_client.config.client_side_validation && property_type.nil?
        fail ArgumentError, "Missing the required parameter 'property_type' when calling PropertyReportsApi.property_reports_get"
      end
      # verify the required parameter 'street_number' is set
      if @api_client.config.client_side_validation && street_number.nil?
        fail ArgumentError, "Missing the required parameter 'street_number' when calling PropertyReportsApi.property_reports_get"
      end
      # verify the required parameter 'street_name' is set
      if @api_client.config.client_side_validation && street_name.nil?
        fail ArgumentError, "Missing the required parameter 'street_name' when calling PropertyReportsApi.property_reports_get"
      end
      # verify the required parameter 'suburb' is set
      if @api_client.config.client_side_validation && suburb.nil?
        fail ArgumentError, "Missing the required parameter 'suburb' when calling PropertyReportsApi.property_reports_get"
      end
      # verify the required parameter 'state' is set
      if @api_client.config.client_side_validation && state.nil?
        fail ArgumentError, "Missing the required parameter 'state' when calling PropertyReportsApi.property_reports_get"
      end
      # resource path
      local_var_path = '/v1/propertyReports'

      # query parameters
      query_params = {}
      query_params[:'propertyType'] = property_type
      query_params[:'streetNumber'] = street_number
      query_params[:'streetName'] = street_name
      query_params[:'suburb'] = suburb
      query_params[:'state'] = state
      query_params[:'unitNumber'] = opts[:'unit_number'] if !opts[:'unit_number'].nil?
      query_params[:'streetType'] = opts[:'street_type'] if !opts[:'street_type'].nil?
      query_params[:'postcode'] = opts[:'postcode'] if !opts[:'postcode'].nil?
      query_params[:'areaSize'] = opts[:'area_size'] if !opts[:'area_size'].nil?
      query_params[:'bedrooms'] = opts[:'bedrooms'] if !opts[:'bedrooms'].nil?
      query_params[:'bathrooms'] = opts[:'bathrooms'] if !opts[:'bathrooms'].nil?
      query_params[:'parking'] = opts[:'parking'] if !opts[:'parking'].nil?
      query_params[:'preparedFor'] = opts[:'prepared_for'] if !opts[:'prepared_for'].nil?
      query_params[:'productCode'] = opts[:'product_code'] if !opts[:'product_code'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DomainPropertyReportServiceV1ModelPropertyReportGenerationResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PropertyReportsApi#property_reports_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
