=begin
#Domain Group API V1

#Provides public access to Domain's microservices

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.9

=end

require 'date'

module DomainClient
  class DomainAgencyServiceV2ModelAgencySummary
    attr_accessor :in_suburb

    attr_accessor :query_suburb

    attr_accessor :has_recently_sold

    attr_accessor :id

    attr_accessor :name

    attr_accessor :suburb

    attr_accessor :logo_url

    attr_accessor :base_url

    attr_accessor :address1

    attr_accessor :address2

    attr_accessor :telephone

    attr_accessor :rental_telephone

    attr_accessor :mobile

    attr_accessor :fax

    attr_accessor :state

    attr_accessor :description

    attr_accessor :email

    attr_accessor :rental_email

    attr_accessor :home_page_search_options

    attr_accessor :account_type

    attr_accessor :number_sold_in_last3_months

    attr_accessor :number_for_sale

    attr_accessor :number_for_rent

    attr_accessor :domain_url

    attr_accessor :show_tab_sold_last_year

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'in_suburb' => :'inSuburb',
        :'query_suburb' => :'querySuburb',
        :'has_recently_sold' => :'hasRecentlySold',
        :'id' => :'id',
        :'name' => :'name',
        :'suburb' => :'suburb',
        :'logo_url' => :'logoUrl',
        :'base_url' => :'baseUrl',
        :'address1' => :'address1',
        :'address2' => :'address2',
        :'telephone' => :'telephone',
        :'rental_telephone' => :'rentalTelephone',
        :'mobile' => :'mobile',
        :'fax' => :'fax',
        :'state' => :'state',
        :'description' => :'description',
        :'email' => :'email',
        :'rental_email' => :'rentalEmail',
        :'home_page_search_options' => :'homePageSearchOptions',
        :'account_type' => :'accountType',
        :'number_sold_in_last3_months' => :'numberSoldInLast3Months',
        :'number_for_sale' => :'numberForSale',
        :'number_for_rent' => :'numberForRent',
        :'domain_url' => :'domainUrl',
        :'show_tab_sold_last_year' => :'showTabSoldLastYear'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'in_suburb' => :'BOOLEAN',
        :'query_suburb' => :'String',
        :'has_recently_sold' => :'BOOLEAN',
        :'id' => :'Integer',
        :'name' => :'String',
        :'suburb' => :'String',
        :'logo_url' => :'String',
        :'base_url' => :'String',
        :'address1' => :'String',
        :'address2' => :'String',
        :'telephone' => :'String',
        :'rental_telephone' => :'String',
        :'mobile' => :'String',
        :'fax' => :'String',
        :'state' => :'String',
        :'description' => :'String',
        :'email' => :'String',
        :'rental_email' => :'String',
        :'home_page_search_options' => :'String',
        :'account_type' => :'Integer',
        :'number_sold_in_last3_months' => :'Integer',
        :'number_for_sale' => :'Integer',
        :'number_for_rent' => :'Integer',
        :'domain_url' => :'String',
        :'show_tab_sold_last_year' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'inSuburb')
        self.in_suburb = attributes[:'inSuburb']
      end

      if attributes.has_key?(:'querySuburb')
        self.query_suburb = attributes[:'querySuburb']
      end

      if attributes.has_key?(:'hasRecentlySold')
        self.has_recently_sold = attributes[:'hasRecentlySold']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'suburb')
        self.suburb = attributes[:'suburb']
      end

      if attributes.has_key?(:'logoUrl')
        self.logo_url = attributes[:'logoUrl']
      end

      if attributes.has_key?(:'baseUrl')
        self.base_url = attributes[:'baseUrl']
      end

      if attributes.has_key?(:'address1')
        self.address1 = attributes[:'address1']
      end

      if attributes.has_key?(:'address2')
        self.address2 = attributes[:'address2']
      end

      if attributes.has_key?(:'telephone')
        self.telephone = attributes[:'telephone']
      end

      if attributes.has_key?(:'rentalTelephone')
        self.rental_telephone = attributes[:'rentalTelephone']
      end

      if attributes.has_key?(:'mobile')
        self.mobile = attributes[:'mobile']
      end

      if attributes.has_key?(:'fax')
        self.fax = attributes[:'fax']
      end

      if attributes.has_key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.has_key?(:'rentalEmail')
        self.rental_email = attributes[:'rentalEmail']
      end

      if attributes.has_key?(:'homePageSearchOptions')
        self.home_page_search_options = attributes[:'homePageSearchOptions']
      end

      if attributes.has_key?(:'accountType')
        self.account_type = attributes[:'accountType']
      end

      if attributes.has_key?(:'numberSoldInLast3Months')
        self.number_sold_in_last3_months = attributes[:'numberSoldInLast3Months']
      end

      if attributes.has_key?(:'numberForSale')
        self.number_for_sale = attributes[:'numberForSale']
      end

      if attributes.has_key?(:'numberForRent')
        self.number_for_rent = attributes[:'numberForRent']
      end

      if attributes.has_key?(:'domainUrl')
        self.domain_url = attributes[:'domainUrl']
      end

      if attributes.has_key?(:'showTabSoldLastYear')
        self.show_tab_sold_last_year = attributes[:'showTabSoldLastYear']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          in_suburb == o.in_suburb &&
          query_suburb == o.query_suburb &&
          has_recently_sold == o.has_recently_sold &&
          id == o.id &&
          name == o.name &&
          suburb == o.suburb &&
          logo_url == o.logo_url &&
          base_url == o.base_url &&
          address1 == o.address1 &&
          address2 == o.address2 &&
          telephone == o.telephone &&
          rental_telephone == o.rental_telephone &&
          mobile == o.mobile &&
          fax == o.fax &&
          state == o.state &&
          description == o.description &&
          email == o.email &&
          rental_email == o.rental_email &&
          home_page_search_options == o.home_page_search_options &&
          account_type == o.account_type &&
          number_sold_in_last3_months == o.number_sold_in_last3_months &&
          number_for_sale == o.number_for_sale &&
          number_for_rent == o.number_for_rent &&
          domain_url == o.domain_url &&
          show_tab_sold_last_year == o.show_tab_sold_last_year
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [in_suburb, query_suburb, has_recently_sold, id, name, suburb, logo_url, base_url, address1, address2, telephone, rental_telephone, mobile, fax, state, description, email, rental_email, home_page_search_options, account_type, number_sold_in_last3_months, number_for_sale, number_for_rent, domain_url, show_tab_sold_last_year].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = DomainClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
