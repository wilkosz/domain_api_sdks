=begin
#Domain Group API V1

#Provides public access to Domain's microservices

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.9

=end

require 'date'

module DomainClient
  class DomainAgencyServiceV2ModelAgencyDetails
    attr_accessor :street_address1

    attr_accessor :street_address2

    attr_accessor :suburb

    attr_accessor :state

    attr_accessor :postcode

    attr_accessor :agency_website

    attr_accessor :principal_name

    attr_accessor :principal_email

    attr_accessor :show_past_sales_prices

    attr_accessor :is_agency_report_enabled

    attr_accessor :sales_email

    attr_accessor :rental_email

    attr_accessor :is_promotional_telephone_active

    attr_accessor :hide_market_price_estimate

    attr_accessor :limit_email_domain

    attr_accessor :show_tab_sold_last_year

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'street_address1' => :'streetAddress1',
        :'street_address2' => :'streetAddress2',
        :'suburb' => :'suburb',
        :'state' => :'state',
        :'postcode' => :'postcode',
        :'agency_website' => :'agencyWebsite',
        :'principal_name' => :'principalName',
        :'principal_email' => :'principalEmail',
        :'show_past_sales_prices' => :'showPastSalesPrices',
        :'is_agency_report_enabled' => :'isAgencyReportEnabled',
        :'sales_email' => :'salesEmail',
        :'rental_email' => :'rentalEmail',
        :'is_promotional_telephone_active' => :'isPromotionalTelephoneActive',
        :'hide_market_price_estimate' => :'hideMarketPriceEstimate',
        :'limit_email_domain' => :'limitEmailDomain',
        :'show_tab_sold_last_year' => :'showTabSoldLastYear'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'street_address1' => :'String',
        :'street_address2' => :'String',
        :'suburb' => :'String',
        :'state' => :'String',
        :'postcode' => :'String',
        :'agency_website' => :'String',
        :'principal_name' => :'String',
        :'principal_email' => :'String',
        :'show_past_sales_prices' => :'BOOLEAN',
        :'is_agency_report_enabled' => :'BOOLEAN',
        :'sales_email' => :'String',
        :'rental_email' => :'String',
        :'is_promotional_telephone_active' => :'BOOLEAN',
        :'hide_market_price_estimate' => :'BOOLEAN',
        :'limit_email_domain' => :'BOOLEAN',
        :'show_tab_sold_last_year' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'streetAddress1')
        self.street_address1 = attributes[:'streetAddress1']
      end

      if attributes.has_key?(:'streetAddress2')
        self.street_address2 = attributes[:'streetAddress2']
      end

      if attributes.has_key?(:'suburb')
        self.suburb = attributes[:'suburb']
      end

      if attributes.has_key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.has_key?(:'postcode')
        self.postcode = attributes[:'postcode']
      end

      if attributes.has_key?(:'agencyWebsite')
        self.agency_website = attributes[:'agencyWebsite']
      end

      if attributes.has_key?(:'principalName')
        self.principal_name = attributes[:'principalName']
      end

      if attributes.has_key?(:'principalEmail')
        self.principal_email = attributes[:'principalEmail']
      end

      if attributes.has_key?(:'showPastSalesPrices')
        self.show_past_sales_prices = attributes[:'showPastSalesPrices']
      end

      if attributes.has_key?(:'isAgencyReportEnabled')
        self.is_agency_report_enabled = attributes[:'isAgencyReportEnabled']
      end

      if attributes.has_key?(:'salesEmail')
        self.sales_email = attributes[:'salesEmail']
      end

      if attributes.has_key?(:'rentalEmail')
        self.rental_email = attributes[:'rentalEmail']
      end

      if attributes.has_key?(:'isPromotionalTelephoneActive')
        self.is_promotional_telephone_active = attributes[:'isPromotionalTelephoneActive']
      end

      if attributes.has_key?(:'hideMarketPriceEstimate')
        self.hide_market_price_estimate = attributes[:'hideMarketPriceEstimate']
      end

      if attributes.has_key?(:'limitEmailDomain')
        self.limit_email_domain = attributes[:'limitEmailDomain']
      end

      if attributes.has_key?(:'showTabSoldLastYear')
        self.show_tab_sold_last_year = attributes[:'showTabSoldLastYear']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          street_address1 == o.street_address1 &&
          street_address2 == o.street_address2 &&
          suburb == o.suburb &&
          state == o.state &&
          postcode == o.postcode &&
          agency_website == o.agency_website &&
          principal_name == o.principal_name &&
          principal_email == o.principal_email &&
          show_past_sales_prices == o.show_past_sales_prices &&
          is_agency_report_enabled == o.is_agency_report_enabled &&
          sales_email == o.sales_email &&
          rental_email == o.rental_email &&
          is_promotional_telephone_active == o.is_promotional_telephone_active &&
          hide_market_price_estimate == o.hide_market_price_estimate &&
          limit_email_domain == o.limit_email_domain &&
          show_tab_sold_last_year == o.show_tab_sold_last_year
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [street_address1, street_address2, suburb, state, postcode, agency_website, principal_name, principal_email, show_past_sales_prices, is_agency_report_enabled, sales_email, rental_email, is_promotional_telephone_active, hide_market_price_estimate, limit_email_domain, show_tab_sold_last_year].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = DomainClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
