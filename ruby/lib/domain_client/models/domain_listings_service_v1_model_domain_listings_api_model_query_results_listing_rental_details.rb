=begin
#Domain Group API V1

#Provides public access to Domain's microservices

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.9

=end

require 'date'

module DomainClient
  class DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails
    attr_accessor :rental_method

    attr_accessor :source

    attr_accessor :leased_date

    attr_accessor :leased_price

    attr_accessor :can_display_price

    attr_accessor :leased_months

    attr_accessor :term_of_lease_from

    attr_accessor :term_of_lease_to

    attr_accessor :lease_outgoings

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'rental_method' => :'rentalMethod',
        :'source' => :'source',
        :'leased_date' => :'leasedDate',
        :'leased_price' => :'leasedPrice',
        :'can_display_price' => :'canDisplayPrice',
        :'leased_months' => :'leasedMonths',
        :'term_of_lease_from' => :'termOfLeaseFrom',
        :'term_of_lease_to' => :'termOfLeaseTo',
        :'lease_outgoings' => :'leaseOutgoings'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'rental_method' => :'String',
        :'source' => :'String',
        :'leased_date' => :'DateTime',
        :'leased_price' => :'Integer',
        :'can_display_price' => :'BOOLEAN',
        :'leased_months' => :'Integer',
        :'term_of_lease_from' => :'Integer',
        :'term_of_lease_to' => :'Integer',
        :'lease_outgoings' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'rentalMethod')
        self.rental_method = attributes[:'rentalMethod']
      end

      if attributes.has_key?(:'source')
        self.source = attributes[:'source']
      end

      if attributes.has_key?(:'leasedDate')
        self.leased_date = attributes[:'leasedDate']
      end

      if attributes.has_key?(:'leasedPrice')
        self.leased_price = attributes[:'leasedPrice']
      end

      if attributes.has_key?(:'canDisplayPrice')
        self.can_display_price = attributes[:'canDisplayPrice']
      end

      if attributes.has_key?(:'leasedMonths')
        self.leased_months = attributes[:'leasedMonths']
      end

      if attributes.has_key?(:'termOfLeaseFrom')
        self.term_of_lease_from = attributes[:'termOfLeaseFrom']
      end

      if attributes.has_key?(:'termOfLeaseTo')
        self.term_of_lease_to = attributes[:'termOfLeaseTo']
      end

      if attributes.has_key?(:'leaseOutgoings')
        self.lease_outgoings = attributes[:'leaseOutgoings']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      rental_method_validator = EnumAttributeValidator.new('String', ['notStated', 'rent', 'share', 'holiday', 'lease'])
      return false unless rental_method_validator.valid?(@rental_method)
      source_validator = EnumAttributeValidator.new('String', ['internal', 'external'])
      return false unless source_validator.valid?(@source)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] rental_method Object to be assigned
    def rental_method=(rental_method)
      validator = EnumAttributeValidator.new('String', ['notStated', 'rent', 'share', 'holiday', 'lease'])
      unless validator.valid?(rental_method)
        fail ArgumentError, 'invalid value for "rental_method", must be one of #{validator.allowable_values}.'
      end
      @rental_method = rental_method
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] source Object to be assigned
    def source=(source)
      validator = EnumAttributeValidator.new('String', ['internal', 'external'])
      unless validator.valid?(source)
        fail ArgumentError, 'invalid value for "source", must be one of #{validator.allowable_values}.'
      end
      @source = source
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          rental_method == o.rental_method &&
          source == o.source &&
          leased_date == o.leased_date &&
          leased_price == o.leased_price &&
          can_display_price == o.can_display_price &&
          leased_months == o.leased_months &&
          term_of_lease_from == o.term_of_lease_from &&
          term_of_lease_to == o.term_of_lease_to &&
          lease_outgoings == o.lease_outgoings
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [rental_method, source, leased_date, leased_price, can_display_price, leased_months, term_of_lease_from, term_of_lease_to, lease_outgoings].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = DomainClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
