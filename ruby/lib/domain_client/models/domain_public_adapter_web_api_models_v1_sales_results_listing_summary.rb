=begin
#Domain Group API V1

#Provides public access to Domain's microservices

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.9

=end

require 'date'

module DomainClient
  # Summary of listing details
  class DomainPublicAdapterWebApiModelsV1SalesResultsListingSummary
    # Gets or Sets UnitNumber
    attr_accessor :unit_number

    # Gets or Sets StreetNumber
    attr_accessor :street_number

    # Gets or Sets StreetName
    attr_accessor :street_name

    # Gets or Sets StreetType
    attr_accessor :street_type

    # Gets or Sets Suburb
    attr_accessor :suburb

    # Gets or Sets Postcode
    attr_accessor :postcode

    # Gets or Sets State
    attr_accessor :state

    # Gets or Sets the GeoLocation
    attr_accessor :geo_location

    # Gets or Sets PropertyType
    attr_accessor :property_type

    # Gets or Sets Bedrooms
    attr_accessor :bedrooms

    # Gets or Sets Bathrooms
    attr_accessor :bathrooms

    # Gets or Sets Carspaces
    attr_accessor :carspaces

    # Gets or Sets Price
    attr_accessor :price

    # Gets or Sets Result
    attr_accessor :result

    # Gets or Sets Agent
    attr_accessor :agent

    # Gets or Sets the listing id
    attr_accessor :id

    # Gets or Sets DomainAgencyId
    attr_accessor :agency_id

    # Gets or Sets AgencyName
    attr_accessor :agency_name

    # Gets or Sets AgencyProfilePageUrl
    attr_accessor :agency_profile_page_url

    # Gets or Sets DomainPropertyDetailsUrl
    attr_accessor :property_details_url

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'unit_number' => :'unitNumber',
        :'street_number' => :'streetNumber',
        :'street_name' => :'streetName',
        :'street_type' => :'streetType',
        :'suburb' => :'suburb',
        :'postcode' => :'postcode',
        :'state' => :'state',
        :'geo_location' => :'geoLocation',
        :'property_type' => :'propertyType',
        :'bedrooms' => :'bedrooms',
        :'bathrooms' => :'bathrooms',
        :'carspaces' => :'carspaces',
        :'price' => :'price',
        :'result' => :'result',
        :'agent' => :'agent',
        :'id' => :'id',
        :'agency_id' => :'agencyId',
        :'agency_name' => :'agencyName',
        :'agency_profile_page_url' => :'agencyProfilePageUrl',
        :'property_details_url' => :'propertyDetailsUrl'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'unit_number' => :'String',
        :'street_number' => :'String',
        :'street_name' => :'String',
        :'street_type' => :'String',
        :'suburb' => :'String',
        :'postcode' => :'String',
        :'state' => :'String',
        :'geo_location' => :'DomainPublicAdapterWebApiModelsV1SalesResultsGeoLocation',
        :'property_type' => :'String',
        :'bedrooms' => :'Integer',
        :'bathrooms' => :'Integer',
        :'carspaces' => :'Integer',
        :'price' => :'Integer',
        :'result' => :'String',
        :'agent' => :'String',
        :'id' => :'Integer',
        :'agency_id' => :'Integer',
        :'agency_name' => :'String',
        :'agency_profile_page_url' => :'String',
        :'property_details_url' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'unitNumber')
        self.unit_number = attributes[:'unitNumber']
      end

      if attributes.has_key?(:'streetNumber')
        self.street_number = attributes[:'streetNumber']
      end

      if attributes.has_key?(:'streetName')
        self.street_name = attributes[:'streetName']
      end

      if attributes.has_key?(:'streetType')
        self.street_type = attributes[:'streetType']
      end

      if attributes.has_key?(:'suburb')
        self.suburb = attributes[:'suburb']
      end

      if attributes.has_key?(:'postcode')
        self.postcode = attributes[:'postcode']
      end

      if attributes.has_key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.has_key?(:'geoLocation')
        self.geo_location = attributes[:'geoLocation']
      end

      if attributes.has_key?(:'propertyType')
        self.property_type = attributes[:'propertyType']
      end

      if attributes.has_key?(:'bedrooms')
        self.bedrooms = attributes[:'bedrooms']
      end

      if attributes.has_key?(:'bathrooms')
        self.bathrooms = attributes[:'bathrooms']
      end

      if attributes.has_key?(:'carspaces')
        self.carspaces = attributes[:'carspaces']
      end

      if attributes.has_key?(:'price')
        self.price = attributes[:'price']
      end

      if attributes.has_key?(:'result')
        self.result = attributes[:'result']
      end

      if attributes.has_key?(:'agent')
        self.agent = attributes[:'agent']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'agencyId')
        self.agency_id = attributes[:'agencyId']
      end

      if attributes.has_key?(:'agencyName')
        self.agency_name = attributes[:'agencyName']
      end

      if attributes.has_key?(:'agencyProfilePageUrl')
        self.agency_profile_page_url = attributes[:'agencyProfilePageUrl']
      end

      if attributes.has_key?(:'propertyDetailsUrl')
        self.property_details_url = attributes[:'propertyDetailsUrl']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          unit_number == o.unit_number &&
          street_number == o.street_number &&
          street_name == o.street_name &&
          street_type == o.street_type &&
          suburb == o.suburb &&
          postcode == o.postcode &&
          state == o.state &&
          geo_location == o.geo_location &&
          property_type == o.property_type &&
          bedrooms == o.bedrooms &&
          bathrooms == o.bathrooms &&
          carspaces == o.carspaces &&
          price == o.price &&
          result == o.result &&
          agent == o.agent &&
          id == o.id &&
          agency_id == o.agency_id &&
          agency_name == o.agency_name &&
          agency_profile_page_url == o.agency_profile_page_url &&
          property_details_url == o.property_details_url
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [unit_number, street_number, street_name, street_type, suburb, postcode, state, geo_location, property_type, bedrooms, bathrooms, carspaces, price, result, agent, id, agency_id, agency_name, agency_profile_page_url, property_details_url].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = DomainClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
