=begin
#Domain Group API V1

#Provides public access to Domain's microservices

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.9

=end

require 'date'

module DomainClient
  class DomainLocationProfilesServiceV1ModelLocationData
    attr_accessor :studios_for_rent

    attr_accessor :terraced_houses_for_sale

    attr_accessor :semi_detached_houses_for_sale

    attr_accessor :townhouses_for_rent

    attr_accessor :apartments_and_units_for_sale

    attr_accessor :apartments_and_units_for_rent

    attr_accessor :villas_for_sale

    attr_accessor :duplexes_for_sale

    attr_accessor :semi_detached_houses_for_rent

    attr_accessor :studios_for_sale

    attr_accessor :single_percentage

    attr_accessor :most_common_age_bracket

    attr_accessor :renter_percentage

    attr_accessor :penthouses_for_sale

    attr_accessor :villas_for_rent

    attr_accessor :duplexes_for_rent

    attr_accessor :houses_for_sale

    attr_accessor :owner_occupier_percentage

    attr_accessor :property_categories

    attr_accessor :population

    attr_accessor :penthouses_for_rent

    attr_accessor :townhouses_for_sale

    attr_accessor :terraced_houses_for_rent

    attr_accessor :married_percentage

    attr_accessor :houses_for_rent

    attr_accessor :block_of_units_for_sale

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'studios_for_rent' => :'studiosForRent',
        :'terraced_houses_for_sale' => :'terracedHousesForSale',
        :'semi_detached_houses_for_sale' => :'semiDetachedHousesForSale',
        :'townhouses_for_rent' => :'townhousesForRent',
        :'apartments_and_units_for_sale' => :'apartmentsAndUnitsForSale',
        :'apartments_and_units_for_rent' => :'apartmentsAndUnitsForRent',
        :'villas_for_sale' => :'villasForSale',
        :'duplexes_for_sale' => :'duplexesForSale',
        :'semi_detached_houses_for_rent' => :'semiDetachedHousesForRent',
        :'studios_for_sale' => :'studiosForSale',
        :'single_percentage' => :'singlePercentage',
        :'most_common_age_bracket' => :'mostCommonAgeBracket',
        :'renter_percentage' => :'renterPercentage',
        :'penthouses_for_sale' => :'penthousesForSale',
        :'villas_for_rent' => :'villasForRent',
        :'duplexes_for_rent' => :'duplexesForRent',
        :'houses_for_sale' => :'housesForSale',
        :'owner_occupier_percentage' => :'ownerOccupierPercentage',
        :'property_categories' => :'propertyCategories',
        :'population' => :'population',
        :'penthouses_for_rent' => :'penthousesForRent',
        :'townhouses_for_sale' => :'townhousesForSale',
        :'terraced_houses_for_rent' => :'terracedHousesForRent',
        :'married_percentage' => :'marriedPercentage',
        :'houses_for_rent' => :'housesForRent',
        :'block_of_units_for_sale' => :'blockOfUnitsForSale'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'studios_for_rent' => :'Integer',
        :'terraced_houses_for_sale' => :'Integer',
        :'semi_detached_houses_for_sale' => :'Integer',
        :'townhouses_for_rent' => :'Integer',
        :'apartments_and_units_for_sale' => :'Integer',
        :'apartments_and_units_for_rent' => :'Integer',
        :'villas_for_sale' => :'Integer',
        :'duplexes_for_sale' => :'Integer',
        :'semi_detached_houses_for_rent' => :'Integer',
        :'studios_for_sale' => :'Integer',
        :'single_percentage' => :'Float',
        :'most_common_age_bracket' => :'String',
        :'renter_percentage' => :'Float',
        :'penthouses_for_sale' => :'Integer',
        :'villas_for_rent' => :'Integer',
        :'duplexes_for_rent' => :'Integer',
        :'houses_for_sale' => :'Integer',
        :'owner_occupier_percentage' => :'Float',
        :'property_categories' => :'Array<DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories>',
        :'population' => :'Float',
        :'penthouses_for_rent' => :'Integer',
        :'townhouses_for_sale' => :'Integer',
        :'terraced_houses_for_rent' => :'Integer',
        :'married_percentage' => :'Float',
        :'houses_for_rent' => :'Integer',
        :'block_of_units_for_sale' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'studiosForRent')
        self.studios_for_rent = attributes[:'studiosForRent']
      end

      if attributes.has_key?(:'terracedHousesForSale')
        self.terraced_houses_for_sale = attributes[:'terracedHousesForSale']
      end

      if attributes.has_key?(:'semiDetachedHousesForSale')
        self.semi_detached_houses_for_sale = attributes[:'semiDetachedHousesForSale']
      end

      if attributes.has_key?(:'townhousesForRent')
        self.townhouses_for_rent = attributes[:'townhousesForRent']
      end

      if attributes.has_key?(:'apartmentsAndUnitsForSale')
        self.apartments_and_units_for_sale = attributes[:'apartmentsAndUnitsForSale']
      end

      if attributes.has_key?(:'apartmentsAndUnitsForRent')
        self.apartments_and_units_for_rent = attributes[:'apartmentsAndUnitsForRent']
      end

      if attributes.has_key?(:'villasForSale')
        self.villas_for_sale = attributes[:'villasForSale']
      end

      if attributes.has_key?(:'duplexesForSale')
        self.duplexes_for_sale = attributes[:'duplexesForSale']
      end

      if attributes.has_key?(:'semiDetachedHousesForRent')
        self.semi_detached_houses_for_rent = attributes[:'semiDetachedHousesForRent']
      end

      if attributes.has_key?(:'studiosForSale')
        self.studios_for_sale = attributes[:'studiosForSale']
      end

      if attributes.has_key?(:'singlePercentage')
        self.single_percentage = attributes[:'singlePercentage']
      end

      if attributes.has_key?(:'mostCommonAgeBracket')
        self.most_common_age_bracket = attributes[:'mostCommonAgeBracket']
      end

      if attributes.has_key?(:'renterPercentage')
        self.renter_percentage = attributes[:'renterPercentage']
      end

      if attributes.has_key?(:'penthousesForSale')
        self.penthouses_for_sale = attributes[:'penthousesForSale']
      end

      if attributes.has_key?(:'villasForRent')
        self.villas_for_rent = attributes[:'villasForRent']
      end

      if attributes.has_key?(:'duplexesForRent')
        self.duplexes_for_rent = attributes[:'duplexesForRent']
      end

      if attributes.has_key?(:'housesForSale')
        self.houses_for_sale = attributes[:'housesForSale']
      end

      if attributes.has_key?(:'ownerOccupierPercentage')
        self.owner_occupier_percentage = attributes[:'ownerOccupierPercentage']
      end

      if attributes.has_key?(:'propertyCategories')
        if (value = attributes[:'propertyCategories']).is_a?(Array)
          self.property_categories = value
        end
      end

      if attributes.has_key?(:'population')
        self.population = attributes[:'population']
      end

      if attributes.has_key?(:'penthousesForRent')
        self.penthouses_for_rent = attributes[:'penthousesForRent']
      end

      if attributes.has_key?(:'townhousesForSale')
        self.townhouses_for_sale = attributes[:'townhousesForSale']
      end

      if attributes.has_key?(:'terracedHousesForRent')
        self.terraced_houses_for_rent = attributes[:'terracedHousesForRent']
      end

      if attributes.has_key?(:'marriedPercentage')
        self.married_percentage = attributes[:'marriedPercentage']
      end

      if attributes.has_key?(:'housesForRent')
        self.houses_for_rent = attributes[:'housesForRent']
      end

      if attributes.has_key?(:'blockOfUnitsForSale')
        self.block_of_units_for_sale = attributes[:'blockOfUnitsForSale']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          studios_for_rent == o.studios_for_rent &&
          terraced_houses_for_sale == o.terraced_houses_for_sale &&
          semi_detached_houses_for_sale == o.semi_detached_houses_for_sale &&
          townhouses_for_rent == o.townhouses_for_rent &&
          apartments_and_units_for_sale == o.apartments_and_units_for_sale &&
          apartments_and_units_for_rent == o.apartments_and_units_for_rent &&
          villas_for_sale == o.villas_for_sale &&
          duplexes_for_sale == o.duplexes_for_sale &&
          semi_detached_houses_for_rent == o.semi_detached_houses_for_rent &&
          studios_for_sale == o.studios_for_sale &&
          single_percentage == o.single_percentage &&
          most_common_age_bracket == o.most_common_age_bracket &&
          renter_percentage == o.renter_percentage &&
          penthouses_for_sale == o.penthouses_for_sale &&
          villas_for_rent == o.villas_for_rent &&
          duplexes_for_rent == o.duplexes_for_rent &&
          houses_for_sale == o.houses_for_sale &&
          owner_occupier_percentage == o.owner_occupier_percentage &&
          property_categories == o.property_categories &&
          population == o.population &&
          penthouses_for_rent == o.penthouses_for_rent &&
          townhouses_for_sale == o.townhouses_for_sale &&
          terraced_houses_for_rent == o.terraced_houses_for_rent &&
          married_percentage == o.married_percentage &&
          houses_for_rent == o.houses_for_rent &&
          block_of_units_for_sale == o.block_of_units_for_sale
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [studios_for_rent, terraced_houses_for_sale, semi_detached_houses_for_sale, townhouses_for_rent, apartments_and_units_for_sale, apartments_and_units_for_rent, villas_for_sale, duplexes_for_sale, semi_detached_houses_for_rent, studios_for_sale, single_percentage, most_common_age_bracket, renter_percentage, penthouses_for_sale, villas_for_rent, duplexes_for_rent, houses_for_sale, owner_occupier_percentage, property_categories, population, penthouses_for_rent, townhouses_for_sale, terraced_houses_for_rent, married_percentage, houses_for_rent, block_of_units_for_sale].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = DomainClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
