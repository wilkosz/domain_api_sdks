=begin
#Domain Group API V1

#Provides public access to Domain's microservices

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.9

=end

require 'date'

module DomainClient
  # Listing statistics
  class DomainPublicAdapterWebApiModelsV1ListingsStatistics
    # Date of statistics events
    attr_accessor :event_date

    # Domain Advertisement Id
    attr_accessor :listing_id

    # Total number of views for the listing details
    attr_accessor :total_listing_views

    # Total number of listing photo views
    attr_accessor :total_photo_views

    # Total number of listing photo gallery views
    attr_accessor :total_photo_gallery_views

    # Total number of floorplan views
    attr_accessor :total_floorplan_views

    # Total number of address map views
    attr_accessor :total_map_views

    # Total number of vedio views
    attr_accessor :total_video_views

    # Total number of Ebrochure views
    attr_accessor :total_ebrochure_views

    # Total number of agent detail views
    attr_accessor :total_agent_detail_views

    # Total number of times the listing was shortlisted
    attr_accessor :total_shortlisted

    # Total number of time the listing detail was printed
    attr_accessor :total_printed

    # Total number of times the agent phone number was revealed for contact
    attr_accessor :total_agent_phone_number_reveals

    # Total number of enquiries
    attr_accessor :total_enquiries

    # Total number of times the listing link was emailed
    attr_accessor :total_email_to_friend

    # Total number of shares via social media
    attr_accessor :total_shared_via_social_media

    # Total numnber of times when the inspection was saved to calendar
    attr_accessor :total_inspection_time_saving

    # Total number of calls made to agent from inside the listing
    attr_accessor :total_call_to_agent_from_mobile

    # Percentage of total views from website
    attr_accessor :percentage_website_views

    # Percentage of total views from mobile site
    attr_accessor :percentage_mobile_site_views

    # Percentage of total views from smart phone apps
    attr_accessor :percentage_smart_phone_views

    # Percentage of total views from tablets
    attr_accessor :percentage_tablet_views

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'event_date' => :'eventDate',
        :'listing_id' => :'listingId',
        :'total_listing_views' => :'totalListingViews',
        :'total_photo_views' => :'totalPhotoViews',
        :'total_photo_gallery_views' => :'totalPhotoGalleryViews',
        :'total_floorplan_views' => :'totalFloorplanViews',
        :'total_map_views' => :'totalMapViews',
        :'total_video_views' => :'totalVideoViews',
        :'total_ebrochure_views' => :'totalEbrochureViews',
        :'total_agent_detail_views' => :'totalAgentDetailViews',
        :'total_shortlisted' => :'totalShortlisted',
        :'total_printed' => :'totalPrinted',
        :'total_agent_phone_number_reveals' => :'totalAgentPhoneNumberReveals',
        :'total_enquiries' => :'totalEnquiries',
        :'total_email_to_friend' => :'totalEmailToFriend',
        :'total_shared_via_social_media' => :'totalSharedViaSocialMedia',
        :'total_inspection_time_saving' => :'totalInspectionTimeSaving',
        :'total_call_to_agent_from_mobile' => :'totalCallToAgentFromMobile',
        :'percentage_website_views' => :'percentageWebsiteViews',
        :'percentage_mobile_site_views' => :'percentageMobileSiteViews',
        :'percentage_smart_phone_views' => :'percentageSmartPhoneViews',
        :'percentage_tablet_views' => :'percentageTabletViews'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'event_date' => :'DateTime',
        :'listing_id' => :'Integer',
        :'total_listing_views' => :'Integer',
        :'total_photo_views' => :'Integer',
        :'total_photo_gallery_views' => :'Integer',
        :'total_floorplan_views' => :'Integer',
        :'total_map_views' => :'Integer',
        :'total_video_views' => :'Integer',
        :'total_ebrochure_views' => :'Integer',
        :'total_agent_detail_views' => :'Integer',
        :'total_shortlisted' => :'Integer',
        :'total_printed' => :'Integer',
        :'total_agent_phone_number_reveals' => :'Integer',
        :'total_enquiries' => :'Integer',
        :'total_email_to_friend' => :'Integer',
        :'total_shared_via_social_media' => :'Integer',
        :'total_inspection_time_saving' => :'Integer',
        :'total_call_to_agent_from_mobile' => :'Integer',
        :'percentage_website_views' => :'Float',
        :'percentage_mobile_site_views' => :'Float',
        :'percentage_smart_phone_views' => :'Float',
        :'percentage_tablet_views' => :'Float'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'eventDate')
        self.event_date = attributes[:'eventDate']
      end

      if attributes.has_key?(:'listingId')
        self.listing_id = attributes[:'listingId']
      end

      if attributes.has_key?(:'totalListingViews')
        self.total_listing_views = attributes[:'totalListingViews']
      end

      if attributes.has_key?(:'totalPhotoViews')
        self.total_photo_views = attributes[:'totalPhotoViews']
      end

      if attributes.has_key?(:'totalPhotoGalleryViews')
        self.total_photo_gallery_views = attributes[:'totalPhotoGalleryViews']
      end

      if attributes.has_key?(:'totalFloorplanViews')
        self.total_floorplan_views = attributes[:'totalFloorplanViews']
      end

      if attributes.has_key?(:'totalMapViews')
        self.total_map_views = attributes[:'totalMapViews']
      end

      if attributes.has_key?(:'totalVideoViews')
        self.total_video_views = attributes[:'totalVideoViews']
      end

      if attributes.has_key?(:'totalEbrochureViews')
        self.total_ebrochure_views = attributes[:'totalEbrochureViews']
      end

      if attributes.has_key?(:'totalAgentDetailViews')
        self.total_agent_detail_views = attributes[:'totalAgentDetailViews']
      end

      if attributes.has_key?(:'totalShortlisted')
        self.total_shortlisted = attributes[:'totalShortlisted']
      end

      if attributes.has_key?(:'totalPrinted')
        self.total_printed = attributes[:'totalPrinted']
      end

      if attributes.has_key?(:'totalAgentPhoneNumberReveals')
        self.total_agent_phone_number_reveals = attributes[:'totalAgentPhoneNumberReveals']
      end

      if attributes.has_key?(:'totalEnquiries')
        self.total_enquiries = attributes[:'totalEnquiries']
      end

      if attributes.has_key?(:'totalEmailToFriend')
        self.total_email_to_friend = attributes[:'totalEmailToFriend']
      end

      if attributes.has_key?(:'totalSharedViaSocialMedia')
        self.total_shared_via_social_media = attributes[:'totalSharedViaSocialMedia']
      end

      if attributes.has_key?(:'totalInspectionTimeSaving')
        self.total_inspection_time_saving = attributes[:'totalInspectionTimeSaving']
      end

      if attributes.has_key?(:'totalCallToAgentFromMobile')
        self.total_call_to_agent_from_mobile = attributes[:'totalCallToAgentFromMobile']
      end

      if attributes.has_key?(:'percentageWebsiteViews')
        self.percentage_website_views = attributes[:'percentageWebsiteViews']
      end

      if attributes.has_key?(:'percentageMobileSiteViews')
        self.percentage_mobile_site_views = attributes[:'percentageMobileSiteViews']
      end

      if attributes.has_key?(:'percentageSmartPhoneViews')
        self.percentage_smart_phone_views = attributes[:'percentageSmartPhoneViews']
      end

      if attributes.has_key?(:'percentageTabletViews')
        self.percentage_tablet_views = attributes[:'percentageTabletViews']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          event_date == o.event_date &&
          listing_id == o.listing_id &&
          total_listing_views == o.total_listing_views &&
          total_photo_views == o.total_photo_views &&
          total_photo_gallery_views == o.total_photo_gallery_views &&
          total_floorplan_views == o.total_floorplan_views &&
          total_map_views == o.total_map_views &&
          total_video_views == o.total_video_views &&
          total_ebrochure_views == o.total_ebrochure_views &&
          total_agent_detail_views == o.total_agent_detail_views &&
          total_shortlisted == o.total_shortlisted &&
          total_printed == o.total_printed &&
          total_agent_phone_number_reveals == o.total_agent_phone_number_reveals &&
          total_enquiries == o.total_enquiries &&
          total_email_to_friend == o.total_email_to_friend &&
          total_shared_via_social_media == o.total_shared_via_social_media &&
          total_inspection_time_saving == o.total_inspection_time_saving &&
          total_call_to_agent_from_mobile == o.total_call_to_agent_from_mobile &&
          percentage_website_views == o.percentage_website_views &&
          percentage_mobile_site_views == o.percentage_mobile_site_views &&
          percentage_smart_phone_views == o.percentage_smart_phone_views &&
          percentage_tablet_views == o.percentage_tablet_views
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [event_date, listing_id, total_listing_views, total_photo_views, total_photo_gallery_views, total_floorplan_views, total_map_views, total_video_views, total_ebrochure_views, total_agent_detail_views, total_shortlisted, total_printed, total_agent_phone_number_reveals, total_enquiries, total_email_to_friend, total_shared_via_social_media, total_inspection_time_saving, total_call_to_agent_from_mobile, percentage_website_views, percentage_mobile_site_views, percentage_smart_phone_views, percentage_tablet_views].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = DomainClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
