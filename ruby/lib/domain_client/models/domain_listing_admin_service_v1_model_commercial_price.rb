=begin
#Domain Group API V1

#Provides public access to Domain's microservices

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.9

=end

require 'date'

module DomainClient
  # Commercial component for price
  class DomainListingAdminServiceV1ModelCommercialPrice
    # Price Unit type. Can have the values \\\"TotalAmount\\\", \\\"PerSqm\\\". Default = \\\"TotalAmount\\\"
    attr_accessor :price_unit_type

    # Type can have the values \\\"Gross\\\", \\\"Net\\\". Default \\\"Net\\\"
    attr_accessor :price_type

    # GST Option Type. Can have the values \\\"NA\\\", \\\"Inc\\\", \\\"Ex\\\". Default = \\\"NA\\\"
    attr_accessor :gst_option_type

    # Indicates if this property is under price reduction
    attr_accessor :price_reduction

    # When provided this will be shown instead of the price range, e.g.: \\\"Offers over $450K considered\\\"
    attr_accessor :display_text

    # Lowest price the property is expected to sell/rent for to set search price. For a fixed price, set this value the same as To
    attr_accessor :from

    # Highest price the property is expected to sell/rent for to set search price. To should not be greater than 10% above From for sale listings (excl. new developments).               If the range provided is wider, it will be automatically corrected to be 10% around the same middle value.               For a fixed price, set this value the same as From
    attr_accessor :to

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'price_unit_type' => :'priceUnitType',
        :'price_type' => :'priceType',
        :'gst_option_type' => :'gstOptionType',
        :'price_reduction' => :'priceReduction',
        :'display_text' => :'displayText',
        :'from' => :'from',
        :'to' => :'to'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'price_unit_type' => :'String',
        :'price_type' => :'String',
        :'gst_option_type' => :'String',
        :'price_reduction' => :'BOOLEAN',
        :'display_text' => :'String',
        :'from' => :'Integer',
        :'to' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'priceUnitType')
        self.price_unit_type = attributes[:'priceUnitType']
      end

      if attributes.has_key?(:'priceType')
        self.price_type = attributes[:'priceType']
      end

      if attributes.has_key?(:'gstOptionType')
        self.gst_option_type = attributes[:'gstOptionType']
      end

      if attributes.has_key?(:'priceReduction')
        self.price_reduction = attributes[:'priceReduction']
      end

      if attributes.has_key?(:'displayText')
        self.display_text = attributes[:'displayText']
      end

      if attributes.has_key?(:'from')
        self.from = attributes[:'from']
      end

      if attributes.has_key?(:'to')
        self.to = attributes[:'to']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      price_unit_type_validator = EnumAttributeValidator.new('String', ['totalAmount', 'perSqm'])
      return false unless price_unit_type_validator.valid?(@price_unit_type)
      price_type_validator = EnumAttributeValidator.new('String', ['gross', 'net'])
      return false unless price_type_validator.valid?(@price_type)
      gst_option_type_validator = EnumAttributeValidator.new('String', ['na', 'inc', 'ex'])
      return false unless gst_option_type_validator.valid?(@gst_option_type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] price_unit_type Object to be assigned
    def price_unit_type=(price_unit_type)
      validator = EnumAttributeValidator.new('String', ['totalAmount', 'perSqm'])
      unless validator.valid?(price_unit_type)
        fail ArgumentError, 'invalid value for "price_unit_type", must be one of #{validator.allowable_values}.'
      end
      @price_unit_type = price_unit_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] price_type Object to be assigned
    def price_type=(price_type)
      validator = EnumAttributeValidator.new('String', ['gross', 'net'])
      unless validator.valid?(price_type)
        fail ArgumentError, 'invalid value for "price_type", must be one of #{validator.allowable_values}.'
      end
      @price_type = price_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] gst_option_type Object to be assigned
    def gst_option_type=(gst_option_type)
      validator = EnumAttributeValidator.new('String', ['na', 'inc', 'ex'])
      unless validator.valid?(gst_option_type)
        fail ArgumentError, 'invalid value for "gst_option_type", must be one of #{validator.allowable_values}.'
      end
      @gst_option_type = gst_option_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          price_unit_type == o.price_unit_type &&
          price_type == o.price_type &&
          gst_option_type == o.gst_option_type &&
          price_reduction == o.price_reduction &&
          display_text == o.display_text &&
          from == o.from &&
          to == o.to
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [price_unit_type, price_type, gst_option_type, price_reduction, display_text, from, to].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = DomainClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
