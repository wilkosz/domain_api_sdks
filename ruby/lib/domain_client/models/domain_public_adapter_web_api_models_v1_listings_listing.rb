=begin
#Domain Group API V1

#Provides public access to Domain's microservices

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.9

=end

require 'date'

module DomainClient
  # Represents a Property Listing
  class DomainPublicAdapterWebApiModelsV1ListingsListing
    # The type of Advertisement
    attr_accessor :objective

    # Types of the property e.g. House, Duplex, Apartment/Unit/Flat
    attr_accessor :property_types

    # The current status of the property
    attr_accessor :status

    # Sale method of the property
    attr_accessor :sale_mode

    # Listing channel
    attr_accessor :channel

    # The address parts of the property e.g. Suburb, Area, State etc.
    attr_accessor :address_parts

    # Advertiser identifiers associated with the listing
    attr_accessor :advertiser_identifiers

    # APM specific identifiers used to query suburb statistics, demographics etc
    attr_accessor :apm_identifiers

    # Total number of bathrooms in the property
    attr_accessor :bathrooms

    # Total number of bedrooms in the property; Studio apartments have a value of \\\"0\\\"
    attr_accessor :bedrooms

    # The building area display value of the property e.g. 160 ha
    attr_accessor :building_area

    # The properties building area in square meters
    attr_accessor :building_area_sqm

    # Total number of car spaces in the property.
    attr_accessor :carspaces

    # The date the property is available
    attr_accessor :date_available

    # The date/time the listing was created
    attr_accessor :date_created

    # The date/time the listing had major update
    attr_accessor :date_updated

    # When minor update applied to listing
    attr_accessor :date_minor_updated

    # The date/time the listing was first listed
    attr_accessor :date_listed

    # The date/time the listing was purged.
    attr_accessor :date_purged

    # The long description of the property provided by the advertiser
    attr_accessor :description

    # The ID of the development project - null if no associated project
    attr_accessor :dev_project_id

    # Energy Efficiency Rating value for ACT properties
    attr_accessor :energy_efficiency_rating

    # The property features specified by the advertiser
    attr_accessor :features

    # The geo location of the property. May not be present if property address is poorly described
    attr_accessor :geo_location

    # The short description of the property provided by the advertiser
    attr_accessor :headline

    # The identifier which uniquely identifies the listing
    attr_accessor :id

    # Inspection details for this property
    attr_accessor :inspection_details

    # Indicates whether the property is a new development
    attr_accessor :is_new_development

    # The land area display string for the property e.g. 160 sqm
    attr_accessor :land_area

    # The properties land area in square meters
    attr_accessor :land_area_sqm

    # The media associated with the property provided by the advertiser
    attr_accessor :media

    # Price details of the property
    attr_accessor :price_details

    # The identifier which uniquely identifies the property being advertised.                   This may be empty if the Address of property is poorly described
    attr_accessor :property_id

    # Information for the listing provider. e.g. bulkuploader information
    attr_accessor :provider_details

    # The rental detail's of the property in case of it being for rent or leased
    attr_accessor :rental_details

    # The sale detail's of the property in case of it being for sale or sold
    attr_accessor :sale_details

    # Indicates if the property has been withdrawn               from the market
    attr_accessor :is_withdrawn

    # listing SEO Url
    attr_accessor :seo_url

    # In case of a mapping error is used to display error details
    attr_accessor :error_message

    # The Listing's Surroundpix Url.
    attr_accessor :virtual_tour_url

    # If homepass is enabled for the listing (agency)
    attr_accessor :homepass_enabled

    # Statement of information that is legally required in VIC for sale Listings
    attr_accessor :statement_of_information

    # Number of dwellings for current listing
    attr_accessor :number_of_dwellings

    # Highlight items for the listing
    attr_accessor :highlights

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'objective' => :'objective',
        :'property_types' => :'propertyTypes',
        :'status' => :'status',
        :'sale_mode' => :'saleMode',
        :'channel' => :'channel',
        :'address_parts' => :'addressParts',
        :'advertiser_identifiers' => :'advertiserIdentifiers',
        :'apm_identifiers' => :'apmIdentifiers',
        :'bathrooms' => :'bathrooms',
        :'bedrooms' => :'bedrooms',
        :'building_area' => :'buildingArea',
        :'building_area_sqm' => :'buildingAreaSqm',
        :'carspaces' => :'carspaces',
        :'date_available' => :'dateAvailable',
        :'date_created' => :'dateCreated',
        :'date_updated' => :'dateUpdated',
        :'date_minor_updated' => :'dateMinorUpdated',
        :'date_listed' => :'dateListed',
        :'date_purged' => :'datePurged',
        :'description' => :'description',
        :'dev_project_id' => :'devProjectId',
        :'energy_efficiency_rating' => :'energyEfficiencyRating',
        :'features' => :'features',
        :'geo_location' => :'geoLocation',
        :'headline' => :'headline',
        :'id' => :'id',
        :'inspection_details' => :'inspectionDetails',
        :'is_new_development' => :'isNewDevelopment',
        :'land_area' => :'landArea',
        :'land_area_sqm' => :'landAreaSqm',
        :'media' => :'media',
        :'price_details' => :'priceDetails',
        :'property_id' => :'propertyId',
        :'provider_details' => :'providerDetails',
        :'rental_details' => :'rentalDetails',
        :'sale_details' => :'saleDetails',
        :'is_withdrawn' => :'isWithdrawn',
        :'seo_url' => :'seoUrl',
        :'error_message' => :'errorMessage',
        :'virtual_tour_url' => :'virtualTourUrl',
        :'homepass_enabled' => :'homepassEnabled',
        :'statement_of_information' => :'statementOfInformation',
        :'number_of_dwellings' => :'numberOfDwellings',
        :'highlights' => :'highlights'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'objective' => :'String',
        :'property_types' => :'Array<String>',
        :'status' => :'String',
        :'sale_mode' => :'String',
        :'channel' => :'String',
        :'address_parts' => :'DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAddressParts',
        :'advertiser_identifiers' => :'DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAdvertiserIdentifiers',
        :'apm_identifiers' => :'DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers',
        :'bathrooms' => :'Float',
        :'bedrooms' => :'Float',
        :'building_area' => :'String',
        :'building_area_sqm' => :'Float',
        :'carspaces' => :'Float',
        :'date_available' => :'DateTime',
        :'date_created' => :'DateTime',
        :'date_updated' => :'DateTime',
        :'date_minor_updated' => :'DateTime',
        :'date_listed' => :'DateTime',
        :'date_purged' => :'DateTime',
        :'description' => :'String',
        :'dev_project_id' => :'Integer',
        :'energy_efficiency_rating' => :'Integer',
        :'features' => :'Array<String>',
        :'geo_location' => :'DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingGeoLocation',
        :'headline' => :'String',
        :'id' => :'Integer',
        :'inspection_details' => :'DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPropertyInspections',
        :'is_new_development' => :'BOOLEAN',
        :'land_area' => :'String',
        :'land_area_sqm' => :'Float',
        :'media' => :'Array<DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingListingMedia>',
        :'price_details' => :'DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPriceDetails',
        :'property_id' => :'String',
        :'provider_details' => :'DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingProviderDetails',
        :'rental_details' => :'DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails',
        :'sale_details' => :'DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSaleDetails',
        :'is_withdrawn' => :'BOOLEAN',
        :'seo_url' => :'String',
        :'error_message' => :'String',
        :'virtual_tour_url' => :'String',
        :'homepass_enabled' => :'BOOLEAN',
        :'statement_of_information' => :'DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingStatementOfInformation',
        :'number_of_dwellings' => :'Integer',
        :'highlights' => :'Array<String>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'objective')
        self.objective = attributes[:'objective']
      end

      if attributes.has_key?(:'propertyTypes')
        if (value = attributes[:'propertyTypes']).is_a?(Array)
          self.property_types = value
        end
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.has_key?(:'saleMode')
        self.sale_mode = attributes[:'saleMode']
      end

      if attributes.has_key?(:'channel')
        self.channel = attributes[:'channel']
      end

      if attributes.has_key?(:'addressParts')
        self.address_parts = attributes[:'addressParts']
      end

      if attributes.has_key?(:'advertiserIdentifiers')
        self.advertiser_identifiers = attributes[:'advertiserIdentifiers']
      end

      if attributes.has_key?(:'apmIdentifiers')
        self.apm_identifiers = attributes[:'apmIdentifiers']
      end

      if attributes.has_key?(:'bathrooms')
        self.bathrooms = attributes[:'bathrooms']
      end

      if attributes.has_key?(:'bedrooms')
        self.bedrooms = attributes[:'bedrooms']
      end

      if attributes.has_key?(:'buildingArea')
        self.building_area = attributes[:'buildingArea']
      end

      if attributes.has_key?(:'buildingAreaSqm')
        self.building_area_sqm = attributes[:'buildingAreaSqm']
      end

      if attributes.has_key?(:'carspaces')
        self.carspaces = attributes[:'carspaces']
      end

      if attributes.has_key?(:'dateAvailable')
        self.date_available = attributes[:'dateAvailable']
      end

      if attributes.has_key?(:'dateCreated')
        self.date_created = attributes[:'dateCreated']
      end

      if attributes.has_key?(:'dateUpdated')
        self.date_updated = attributes[:'dateUpdated']
      end

      if attributes.has_key?(:'dateMinorUpdated')
        self.date_minor_updated = attributes[:'dateMinorUpdated']
      end

      if attributes.has_key?(:'dateListed')
        self.date_listed = attributes[:'dateListed']
      end

      if attributes.has_key?(:'datePurged')
        self.date_purged = attributes[:'datePurged']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'devProjectId')
        self.dev_project_id = attributes[:'devProjectId']
      end

      if attributes.has_key?(:'energyEfficiencyRating')
        self.energy_efficiency_rating = attributes[:'energyEfficiencyRating']
      end

      if attributes.has_key?(:'features')
        if (value = attributes[:'features']).is_a?(Array)
          self.features = value
        end
      end

      if attributes.has_key?(:'geoLocation')
        self.geo_location = attributes[:'geoLocation']
      end

      if attributes.has_key?(:'headline')
        self.headline = attributes[:'headline']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'inspectionDetails')
        self.inspection_details = attributes[:'inspectionDetails']
      end

      if attributes.has_key?(:'isNewDevelopment')
        self.is_new_development = attributes[:'isNewDevelopment']
      end

      if attributes.has_key?(:'landArea')
        self.land_area = attributes[:'landArea']
      end

      if attributes.has_key?(:'landAreaSqm')
        self.land_area_sqm = attributes[:'landAreaSqm']
      end

      if attributes.has_key?(:'media')
        if (value = attributes[:'media']).is_a?(Array)
          self.media = value
        end
      end

      if attributes.has_key?(:'priceDetails')
        self.price_details = attributes[:'priceDetails']
      end

      if attributes.has_key?(:'propertyId')
        self.property_id = attributes[:'propertyId']
      end

      if attributes.has_key?(:'providerDetails')
        self.provider_details = attributes[:'providerDetails']
      end

      if attributes.has_key?(:'rentalDetails')
        self.rental_details = attributes[:'rentalDetails']
      end

      if attributes.has_key?(:'saleDetails')
        self.sale_details = attributes[:'saleDetails']
      end

      if attributes.has_key?(:'isWithdrawn')
        self.is_withdrawn = attributes[:'isWithdrawn']
      end

      if attributes.has_key?(:'seoUrl')
        self.seo_url = attributes[:'seoUrl']
      end

      if attributes.has_key?(:'errorMessage')
        self.error_message = attributes[:'errorMessage']
      end

      if attributes.has_key?(:'virtualTourUrl')
        self.virtual_tour_url = attributes[:'virtualTourUrl']
      end

      if attributes.has_key?(:'homepassEnabled')
        self.homepass_enabled = attributes[:'homepassEnabled']
      end

      if attributes.has_key?(:'statementOfInformation')
        self.statement_of_information = attributes[:'statementOfInformation']
      end

      if attributes.has_key?(:'numberOfDwellings')
        self.number_of_dwellings = attributes[:'numberOfDwellings']
      end

      if attributes.has_key?(:'highlights')
        if (value = attributes[:'highlights']).is_a?(Array)
          self.highlights = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      objective_validator = EnumAttributeValidator.new('String', ['sale', 'rent'])
      return false unless objective_validator.valid?(@objective)
      status_validator = EnumAttributeValidator.new('String', ['unknown', 'archived', 'underOffer', 'sold', 'leased', 'newDevelopment', 'recentlyUpdated', 'new', 'live', 'pending'])
      return false unless status_validator.valid?(@status)
      sale_mode_validator = EnumAttributeValidator.new('String', ['buy', 'rent', 'share', 'sold', 'leased', 'archived'])
      return false unless sale_mode_validator.valid?(@sale_mode)
      channel_validator = EnumAttributeValidator.new('String', ['residential', 'commercial', 'business'])
      return false unless channel_validator.valid?(@channel)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] objective Object to be assigned
    def objective=(objective)
      validator = EnumAttributeValidator.new('String', ['sale', 'rent'])
      unless validator.valid?(objective)
        fail ArgumentError, 'invalid value for "objective", must be one of #{validator.allowable_values}.'
      end
      @objective = objective
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ['unknown', 'archived', 'underOffer', 'sold', 'leased', 'newDevelopment', 'recentlyUpdated', 'new', 'live', 'pending'])
      unless validator.valid?(status)
        fail ArgumentError, 'invalid value for "status", must be one of #{validator.allowable_values}.'
      end
      @status = status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sale_mode Object to be assigned
    def sale_mode=(sale_mode)
      validator = EnumAttributeValidator.new('String', ['buy', 'rent', 'share', 'sold', 'leased', 'archived'])
      unless validator.valid?(sale_mode)
        fail ArgumentError, 'invalid value for "sale_mode", must be one of #{validator.allowable_values}.'
      end
      @sale_mode = sale_mode
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] channel Object to be assigned
    def channel=(channel)
      validator = EnumAttributeValidator.new('String', ['residential', 'commercial', 'business'])
      unless validator.valid?(channel)
        fail ArgumentError, 'invalid value for "channel", must be one of #{validator.allowable_values}.'
      end
      @channel = channel
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          objective == o.objective &&
          property_types == o.property_types &&
          status == o.status &&
          sale_mode == o.sale_mode &&
          channel == o.channel &&
          address_parts == o.address_parts &&
          advertiser_identifiers == o.advertiser_identifiers &&
          apm_identifiers == o.apm_identifiers &&
          bathrooms == o.bathrooms &&
          bedrooms == o.bedrooms &&
          building_area == o.building_area &&
          building_area_sqm == o.building_area_sqm &&
          carspaces == o.carspaces &&
          date_available == o.date_available &&
          date_created == o.date_created &&
          date_updated == o.date_updated &&
          date_minor_updated == o.date_minor_updated &&
          date_listed == o.date_listed &&
          date_purged == o.date_purged &&
          description == o.description &&
          dev_project_id == o.dev_project_id &&
          energy_efficiency_rating == o.energy_efficiency_rating &&
          features == o.features &&
          geo_location == o.geo_location &&
          headline == o.headline &&
          id == o.id &&
          inspection_details == o.inspection_details &&
          is_new_development == o.is_new_development &&
          land_area == o.land_area &&
          land_area_sqm == o.land_area_sqm &&
          media == o.media &&
          price_details == o.price_details &&
          property_id == o.property_id &&
          provider_details == o.provider_details &&
          rental_details == o.rental_details &&
          sale_details == o.sale_details &&
          is_withdrawn == o.is_withdrawn &&
          seo_url == o.seo_url &&
          error_message == o.error_message &&
          virtual_tour_url == o.virtual_tour_url &&
          homepass_enabled == o.homepass_enabled &&
          statement_of_information == o.statement_of_information &&
          number_of_dwellings == o.number_of_dwellings &&
          highlights == o.highlights
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [objective, property_types, status, sale_mode, channel, address_parts, advertiser_identifiers, apm_identifiers, bathrooms, bedrooms, building_area, building_area_sqm, carspaces, date_available, date_created, date_updated, date_minor_updated, date_listed, date_purged, description, dev_project_id, energy_efficiency_rating, features, geo_location, headline, id, inspection_details, is_new_development, land_area, land_area_sqm, media, price_details, property_id, provider_details, rental_details, sale_details, is_withdrawn, seo_url, error_message, virtual_tour_url, homepass_enabled, statement_of_information, number_of_dwellings, highlights].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = DomainClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
