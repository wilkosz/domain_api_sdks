=begin
#Domain Group API V1

#Provides public access to Domain's microservices

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.9

=end

require 'date'

module DomainClient
  class DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails
    attr_accessor :state

    attr_accessor :features

    attr_accessor :property_type

    attr_accessor :all_property_types

    attr_accessor :bathrooms

    attr_accessor :bedrooms

    attr_accessor :carspaces

    attr_accessor :unit_number

    attr_accessor :street_number

    attr_accessor :street

    attr_accessor :area

    attr_accessor :region

    attr_accessor :suburb

    attr_accessor :postcode

    attr_accessor :displayable_address

    attr_accessor :latitude

    attr_accessor :longitude

    attr_accessor :land_area

    attr_accessor :building_area

    attr_accessor :only_show_properties

    attr_accessor :display_address_type

    attr_accessor :is_rural

    attr_accessor :is_new

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'state' => :'state',
        :'features' => :'features',
        :'property_type' => :'propertyType',
        :'all_property_types' => :'allPropertyTypes',
        :'bathrooms' => :'bathrooms',
        :'bedrooms' => :'bedrooms',
        :'carspaces' => :'carspaces',
        :'unit_number' => :'unitNumber',
        :'street_number' => :'streetNumber',
        :'street' => :'street',
        :'area' => :'area',
        :'region' => :'region',
        :'suburb' => :'suburb',
        :'postcode' => :'postcode',
        :'displayable_address' => :'displayableAddress',
        :'latitude' => :'latitude',
        :'longitude' => :'longitude',
        :'land_area' => :'landArea',
        :'building_area' => :'buildingArea',
        :'only_show_properties' => :'onlyShowProperties',
        :'display_address_type' => :'displayAddressType',
        :'is_rural' => :'isRural',
        :'is_new' => :'isNew'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'state' => :'String',
        :'features' => :'Array<String>',
        :'property_type' => :'String',
        :'all_property_types' => :'Array<String>',
        :'bathrooms' => :'Float',
        :'bedrooms' => :'Float',
        :'carspaces' => :'Integer',
        :'unit_number' => :'String',
        :'street_number' => :'String',
        :'street' => :'String',
        :'area' => :'String',
        :'region' => :'String',
        :'suburb' => :'String',
        :'postcode' => :'String',
        :'displayable_address' => :'String',
        :'latitude' => :'Float',
        :'longitude' => :'Float',
        :'land_area' => :'Float',
        :'building_area' => :'Float',
        :'only_show_properties' => :'Array<String>',
        :'display_address_type' => :'String',
        :'is_rural' => :'BOOLEAN',
        :'is_new' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.has_key?(:'features')
        if (value = attributes[:'features']).is_a?(Array)
          self.features = value
        end
      end

      if attributes.has_key?(:'propertyType')
        self.property_type = attributes[:'propertyType']
      end

      if attributes.has_key?(:'allPropertyTypes')
        if (value = attributes[:'allPropertyTypes']).is_a?(Array)
          self.all_property_types = value
        end
      end

      if attributes.has_key?(:'bathrooms')
        self.bathrooms = attributes[:'bathrooms']
      end

      if attributes.has_key?(:'bedrooms')
        self.bedrooms = attributes[:'bedrooms']
      end

      if attributes.has_key?(:'carspaces')
        self.carspaces = attributes[:'carspaces']
      end

      if attributes.has_key?(:'unitNumber')
        self.unit_number = attributes[:'unitNumber']
      end

      if attributes.has_key?(:'streetNumber')
        self.street_number = attributes[:'streetNumber']
      end

      if attributes.has_key?(:'street')
        self.street = attributes[:'street']
      end

      if attributes.has_key?(:'area')
        self.area = attributes[:'area']
      end

      if attributes.has_key?(:'region')
        self.region = attributes[:'region']
      end

      if attributes.has_key?(:'suburb')
        self.suburb = attributes[:'suburb']
      end

      if attributes.has_key?(:'postcode')
        self.postcode = attributes[:'postcode']
      end

      if attributes.has_key?(:'displayableAddress')
        self.displayable_address = attributes[:'displayableAddress']
      end

      if attributes.has_key?(:'latitude')
        self.latitude = attributes[:'latitude']
      end

      if attributes.has_key?(:'longitude')
        self.longitude = attributes[:'longitude']
      end

      if attributes.has_key?(:'landArea')
        self.land_area = attributes[:'landArea']
      end

      if attributes.has_key?(:'buildingArea')
        self.building_area = attributes[:'buildingArea']
      end

      if attributes.has_key?(:'onlyShowProperties')
        if (value = attributes[:'onlyShowProperties']).is_a?(Array)
          self.only_show_properties = value
        end
      end

      if attributes.has_key?(:'displayAddressType')
        self.display_address_type = attributes[:'displayAddressType']
      end

      if attributes.has_key?(:'isRural')
        self.is_rural = attributes[:'isRural']
      end

      if attributes.has_key?(:'isNew')
        self.is_new = attributes[:'isNew']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      state_validator = EnumAttributeValidator.new('String', ['ACT', 'NSW', 'QLD', 'VIC', 'SA', 'WA', 'NT', 'TAS'])
      return false unless state_validator.valid?(@state)
      property_type_validator = EnumAttributeValidator.new('String', ['Unknown', 'AcreageSemiRural', 'ApartmentUnitFlat', 'Aquaculture', 'BlockOfUnits', 'CarSpace', 'DairyFarming', 'DevelopmentSite', 'Duplex', 'Farm', 'FishingForestry', 'NewHomeDesigns', 'House', 'NewHouseLand', 'IrrigationServices', 'NewLand', 'Livestock', 'NewApartments', 'Penthouse', 'RetirementVillage', 'Rural', 'SemiDetached', 'SpecialistFarm', 'Studio', 'Terrace', 'Townhouse', 'VacantLand', 'Villa', 'Cropping', 'Viticulture', 'MixedFarming', 'Grazing', 'Horticulture', 'Equine', 'Farmlet', 'Orchard', 'RuralLifestyle'])
      return false unless property_type_validator.valid?(@property_type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] state Object to be assigned
    def state=(state)
      validator = EnumAttributeValidator.new('String', ['ACT', 'NSW', 'QLD', 'VIC', 'SA', 'WA', 'NT', 'TAS'])
      unless validator.valid?(state)
        fail ArgumentError, 'invalid value for "state", must be one of #{validator.allowable_values}.'
      end
      @state = state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] property_type Object to be assigned
    def property_type=(property_type)
      validator = EnumAttributeValidator.new('String', ['Unknown', 'AcreageSemiRural', 'ApartmentUnitFlat', 'Aquaculture', 'BlockOfUnits', 'CarSpace', 'DairyFarming', 'DevelopmentSite', 'Duplex', 'Farm', 'FishingForestry', 'NewHomeDesigns', 'House', 'NewHouseLand', 'IrrigationServices', 'NewLand', 'Livestock', 'NewApartments', 'Penthouse', 'RetirementVillage', 'Rural', 'SemiDetached', 'SpecialistFarm', 'Studio', 'Terrace', 'Townhouse', 'VacantLand', 'Villa', 'Cropping', 'Viticulture', 'MixedFarming', 'Grazing', 'Horticulture', 'Equine', 'Farmlet', 'Orchard', 'RuralLifestyle'])
      unless validator.valid?(property_type)
        fail ArgumentError, 'invalid value for "property_type", must be one of #{validator.allowable_values}.'
      end
      @property_type = property_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          state == o.state &&
          features == o.features &&
          property_type == o.property_type &&
          all_property_types == o.all_property_types &&
          bathrooms == o.bathrooms &&
          bedrooms == o.bedrooms &&
          carspaces == o.carspaces &&
          unit_number == o.unit_number &&
          street_number == o.street_number &&
          street == o.street &&
          area == o.area &&
          region == o.region &&
          suburb == o.suburb &&
          postcode == o.postcode &&
          displayable_address == o.displayable_address &&
          latitude == o.latitude &&
          longitude == o.longitude &&
          land_area == o.land_area &&
          building_area == o.building_area &&
          only_show_properties == o.only_show_properties &&
          display_address_type == o.display_address_type &&
          is_rural == o.is_rural &&
          is_new == o.is_new
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [state, features, property_type, all_property_types, bathrooms, bedrooms, carspaces, unit_number, street_number, street, area, region, suburb, postcode, displayable_address, latitude, longitude, land_area, building_area, only_show_properties, display_address_type, is_rural, is_new].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = DomainClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
