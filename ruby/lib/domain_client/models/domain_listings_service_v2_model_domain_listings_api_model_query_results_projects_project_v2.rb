=begin
#Domain Group API V1

#Provides public access to Domain's microservices

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.9

=end

require 'date'

module DomainClient
  class DomainListingsServiceV2ModelDomainListingsApiModelQueryResultsProjectsProjectV2
    attr_accessor :project_profile_type

    attr_accessor :property_types

    attr_accessor :id

    attr_accessor :name

    attr_accessor :start_date

    attr_accessor :end_date

    attr_accessor :address

    attr_accessor :viewing_address

    attr_accessor :displayable_address

    attr_accessor :enquiry_email_address

    attr_accessor :advertiser_identifiers

    attr_accessor :provider_details

    attr_accessor :media

    attr_accessor :project_url

    attr_accessor :headline

    attr_accessor :tagline

    attr_accessor :display_as_last_updated

    attr_accessor :modified_by

    attr_accessor :modified_date

    attr_accessor :created_by

    attr_accessor :created_date

    attr_accessor :background_colour

    attr_accessor :description

    attr_accessor :appointment_required

    attr_accessor :features

    attr_accessor :price_from

    attr_accessor :price_to

    attr_accessor :banner_url

    attr_accessor :big_banner_url

    attr_accessor :small_banner_url

    attr_accessor :logo_url

    attr_accessor :pdfs

    attr_accessor :inspection_details

    attr_accessor :number_of_floors

    attr_accessor :number_of_apartments

    attr_accessor :estimated_completion_date

    attr_accessor :starting_price

    attr_accessor :is_active

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'project_profile_type' => :'projectProfileType',
        :'property_types' => :'propertyTypes',
        :'id' => :'id',
        :'name' => :'name',
        :'start_date' => :'startDate',
        :'end_date' => :'endDate',
        :'address' => :'address',
        :'viewing_address' => :'viewingAddress',
        :'displayable_address' => :'displayableAddress',
        :'enquiry_email_address' => :'enquiryEmailAddress',
        :'advertiser_identifiers' => :'advertiserIdentifiers',
        :'provider_details' => :'providerDetails',
        :'media' => :'media',
        :'project_url' => :'projectUrl',
        :'headline' => :'headline',
        :'tagline' => :'tagline',
        :'display_as_last_updated' => :'displayAsLastUpdated',
        :'modified_by' => :'modifiedBy',
        :'modified_date' => :'modifiedDate',
        :'created_by' => :'createdBy',
        :'created_date' => :'createdDate',
        :'background_colour' => :'backgroundColour',
        :'description' => :'description',
        :'appointment_required' => :'appointmentRequired',
        :'features' => :'features',
        :'price_from' => :'priceFrom',
        :'price_to' => :'priceTo',
        :'banner_url' => :'bannerUrl',
        :'big_banner_url' => :'bigBannerUrl',
        :'small_banner_url' => :'smallBannerUrl',
        :'logo_url' => :'logoUrl',
        :'pdfs' => :'pdfs',
        :'inspection_details' => :'inspectionDetails',
        :'number_of_floors' => :'numberOfFloors',
        :'number_of_apartments' => :'numberOfApartments',
        :'estimated_completion_date' => :'estimatedCompletionDate',
        :'starting_price' => :'startingPrice',
        :'is_active' => :'isActive'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'project_profile_type' => :'String',
        :'property_types' => :'Array<String>',
        :'id' => :'Integer',
        :'name' => :'String',
        :'start_date' => :'DateTime',
        :'end_date' => :'DateTime',
        :'address' => :'DomainListingsServiceV2ModelDomainListingsApiModelQueryResultsProjectsProjectAddressParts',
        :'viewing_address' => :'DomainListingsServiceV2ModelDomainListingsApiModelQueryResultsProjectsProjectAddressParts',
        :'displayable_address' => :'DomainListingsServiceV2ModelDomainListingsApiModelQueryResultsProjectsProjectAddressParts',
        :'enquiry_email_address' => :'String',
        :'advertiser_identifiers' => :'DomainListingsServiceV2ModelDomainListingsApiModelQueryResultsListingAdvertiserIdentifiers',
        :'provider_details' => :'DomainListingsServiceV2ModelDomainListingsApiModelQueryResultsListingProviderDetails',
        :'media' => :'Array<DomainListingsServiceV2ModelDomainListingsApiModelQueryResultsProjectsProjectMedia>',
        :'project_url' => :'String',
        :'headline' => :'String',
        :'tagline' => :'String',
        :'display_as_last_updated' => :'DateTime',
        :'modified_by' => :'String',
        :'modified_date' => :'DateTime',
        :'created_by' => :'String',
        :'created_date' => :'DateTime',
        :'background_colour' => :'String',
        :'description' => :'String',
        :'appointment_required' => :'BOOLEAN',
        :'features' => :'Array<String>',
        :'price_from' => :'Float',
        :'price_to' => :'Float',
        :'banner_url' => :'String',
        :'big_banner_url' => :'String',
        :'small_banner_url' => :'String',
        :'logo_url' => :'String',
        :'pdfs' => :'Array<DomainListingsServiceV2ModelDomainListingsApiModelQueryResultsProjectsPdfUpload>',
        :'inspection_details' => :'DomainListingsServiceV2ModelDomainListingsApiModelQueryResultsListingPropertyInspections',
        :'number_of_floors' => :'Integer',
        :'number_of_apartments' => :'Integer',
        :'estimated_completion_date' => :'DateTime',
        :'starting_price' => :'Float',
        :'is_active' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'projectProfileType')
        self.project_profile_type = attributes[:'projectProfileType']
      end

      if attributes.has_key?(:'propertyTypes')
        if (value = attributes[:'propertyTypes']).is_a?(Array)
          self.property_types = value
        end
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'startDate')
        self.start_date = attributes[:'startDate']
      end

      if attributes.has_key?(:'endDate')
        self.end_date = attributes[:'endDate']
      end

      if attributes.has_key?(:'address')
        self.address = attributes[:'address']
      end

      if attributes.has_key?(:'viewingAddress')
        self.viewing_address = attributes[:'viewingAddress']
      end

      if attributes.has_key?(:'displayableAddress')
        self.displayable_address = attributes[:'displayableAddress']
      end

      if attributes.has_key?(:'enquiryEmailAddress')
        self.enquiry_email_address = attributes[:'enquiryEmailAddress']
      end

      if attributes.has_key?(:'advertiserIdentifiers')
        self.advertiser_identifiers = attributes[:'advertiserIdentifiers']
      end

      if attributes.has_key?(:'providerDetails')
        self.provider_details = attributes[:'providerDetails']
      end

      if attributes.has_key?(:'media')
        if (value = attributes[:'media']).is_a?(Array)
          self.media = value
        end
      end

      if attributes.has_key?(:'projectUrl')
        self.project_url = attributes[:'projectUrl']
      end

      if attributes.has_key?(:'headline')
        self.headline = attributes[:'headline']
      end

      if attributes.has_key?(:'tagline')
        self.tagline = attributes[:'tagline']
      end

      if attributes.has_key?(:'displayAsLastUpdated')
        self.display_as_last_updated = attributes[:'displayAsLastUpdated']
      end

      if attributes.has_key?(:'modifiedBy')
        self.modified_by = attributes[:'modifiedBy']
      end

      if attributes.has_key?(:'modifiedDate')
        self.modified_date = attributes[:'modifiedDate']
      end

      if attributes.has_key?(:'createdBy')
        self.created_by = attributes[:'createdBy']
      end

      if attributes.has_key?(:'createdDate')
        self.created_date = attributes[:'createdDate']
      end

      if attributes.has_key?(:'backgroundColour')
        self.background_colour = attributes[:'backgroundColour']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'appointmentRequired')
        self.appointment_required = attributes[:'appointmentRequired']
      end

      if attributes.has_key?(:'features')
        if (value = attributes[:'features']).is_a?(Array)
          self.features = value
        end
      end

      if attributes.has_key?(:'priceFrom')
        self.price_from = attributes[:'priceFrom']
      end

      if attributes.has_key?(:'priceTo')
        self.price_to = attributes[:'priceTo']
      end

      if attributes.has_key?(:'bannerUrl')
        self.banner_url = attributes[:'bannerUrl']
      end

      if attributes.has_key?(:'bigBannerUrl')
        self.big_banner_url = attributes[:'bigBannerUrl']
      end

      if attributes.has_key?(:'smallBannerUrl')
        self.small_banner_url = attributes[:'smallBannerUrl']
      end

      if attributes.has_key?(:'logoUrl')
        self.logo_url = attributes[:'logoUrl']
      end

      if attributes.has_key?(:'pdfs')
        if (value = attributes[:'pdfs']).is_a?(Array)
          self.pdfs = value
        end
      end

      if attributes.has_key?(:'inspectionDetails')
        self.inspection_details = attributes[:'inspectionDetails']
      end

      if attributes.has_key?(:'numberOfFloors')
        self.number_of_floors = attributes[:'numberOfFloors']
      end

      if attributes.has_key?(:'numberOfApartments')
        self.number_of_apartments = attributes[:'numberOfApartments']
      end

      if attributes.has_key?(:'estimatedCompletionDate')
        self.estimated_completion_date = attributes[:'estimatedCompletionDate']
      end

      if attributes.has_key?(:'startingPrice')
        self.starting_price = attributes[:'startingPrice']
      end

      if attributes.has_key?(:'isActive')
        self.is_active = attributes[:'isActive']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      project_profile_type_validator = EnumAttributeValidator.new('String', ['noProfile', 'projectProfileStandard', 'projectProfilePremium'])
      return false unless project_profile_type_validator.valid?(@project_profile_type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] project_profile_type Object to be assigned
    def project_profile_type=(project_profile_type)
      validator = EnumAttributeValidator.new('String', ['noProfile', 'projectProfileStandard', 'projectProfilePremium'])
      unless validator.valid?(project_profile_type)
        fail ArgumentError, 'invalid value for "project_profile_type", must be one of #{validator.allowable_values}.'
      end
      @project_profile_type = project_profile_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          project_profile_type == o.project_profile_type &&
          property_types == o.property_types &&
          id == o.id &&
          name == o.name &&
          start_date == o.start_date &&
          end_date == o.end_date &&
          address == o.address &&
          viewing_address == o.viewing_address &&
          displayable_address == o.displayable_address &&
          enquiry_email_address == o.enquiry_email_address &&
          advertiser_identifiers == o.advertiser_identifiers &&
          provider_details == o.provider_details &&
          media == o.media &&
          project_url == o.project_url &&
          headline == o.headline &&
          tagline == o.tagline &&
          display_as_last_updated == o.display_as_last_updated &&
          modified_by == o.modified_by &&
          modified_date == o.modified_date &&
          created_by == o.created_by &&
          created_date == o.created_date &&
          background_colour == o.background_colour &&
          description == o.description &&
          appointment_required == o.appointment_required &&
          features == o.features &&
          price_from == o.price_from &&
          price_to == o.price_to &&
          banner_url == o.banner_url &&
          big_banner_url == o.big_banner_url &&
          small_banner_url == o.small_banner_url &&
          logo_url == o.logo_url &&
          pdfs == o.pdfs &&
          inspection_details == o.inspection_details &&
          number_of_floors == o.number_of_floors &&
          number_of_apartments == o.number_of_apartments &&
          estimated_completion_date == o.estimated_completion_date &&
          starting_price == o.starting_price &&
          is_active == o.is_active
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [project_profile_type, property_types, id, name, start_date, end_date, address, viewing_address, displayable_address, enquiry_email_address, advertiser_identifiers, provider_details, media, project_url, headline, tagline, display_as_last_updated, modified_by, modified_date, created_by, created_date, background_colour, description, appointment_required, features, price_from, price_to, banner_url, big_banner_url, small_banner_url, logo_url, pdfs, inspection_details, number_of_floors, number_of_apartments, estimated_completion_date, starting_price, is_active].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = DomainClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
