=begin
#Domain Group API V1

#Provides public access to Domain's microservices

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.9

=end

require 'date'

module DomainClient
  # Represents a CRE Business Search Request
  class DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest
    # AdvertiserId e.g. An Agency ID
    attr_accessor :advertiser_id

    # Listing property types
    attr_accessor :property_types

    # Search listings by keyword
    attr_accessor :keywords

    # The franchise brand ID
    attr_accessor :brand_id

    # The franchise group ID. A franchise group owns multiple franchise brands.
    attr_accessor :franchise_group_id

    # Location search criteria
    attr_accessor :locations

    # Search result page number
    attr_accessor :page

    # Search results page size
    attr_accessor :page_size

    # Price search criteria
    attr_accessor :price

    # Sorting order
    attr_accessor :sort

    # Search mode
    attr_accessor :search_mode

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'advertiser_id' => :'advertiserId',
        :'property_types' => :'propertyTypes',
        :'keywords' => :'keywords',
        :'brand_id' => :'brandId',
        :'franchise_group_id' => :'franchiseGroupId',
        :'locations' => :'locations',
        :'page' => :'page',
        :'page_size' => :'pageSize',
        :'price' => :'price',
        :'sort' => :'sort',
        :'search_mode' => :'searchMode'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'advertiser_id' => :'Integer',
        :'property_types' => :'Array<String>',
        :'keywords' => :'Array<String>',
        :'brand_id' => :'Integer',
        :'franchise_group_id' => :'Integer',
        :'locations' => :'Array<DomainPublicAdapterWebApiModelsV1ListingsBusinessLocationSearch>',
        :'page' => :'Integer',
        :'page_size' => :'Integer',
        :'price' => :'DomainPublicAdapterWebApiModelsV1ListingsBusinessPriceSearch',
        :'sort' => :'String',
        :'search_mode' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'advertiserId')
        self.advertiser_id = attributes[:'advertiserId']
      end

      if attributes.has_key?(:'propertyTypes')
        if (value = attributes[:'propertyTypes']).is_a?(Array)
          self.property_types = value
        end
      end

      if attributes.has_key?(:'keywords')
        if (value = attributes[:'keywords']).is_a?(Array)
          self.keywords = value
        end
      end

      if attributes.has_key?(:'brandId')
        self.brand_id = attributes[:'brandId']
      end

      if attributes.has_key?(:'franchiseGroupId')
        self.franchise_group_id = attributes[:'franchiseGroupId']
      end

      if attributes.has_key?(:'locations')
        if (value = attributes[:'locations']).is_a?(Array)
          self.locations = value
        end
      end

      if attributes.has_key?(:'page')
        self.page = attributes[:'page']
      end

      if attributes.has_key?(:'pageSize')
        self.page_size = attributes[:'pageSize']
      end

      if attributes.has_key?(:'price')
        self.price = attributes[:'price']
      end

      if attributes.has_key?(:'sort')
        self.sort = attributes[:'sort']
      end

      if attributes.has_key?(:'searchMode')
        self.search_mode = attributes[:'searchMode']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      sort_validator = EnumAttributeValidator.new('String', ['default', 'newestFirst', 'lowTotalPriceFirst', 'hightTotalPriceFirst', 'suburbAsc', 'suburbDesc'])
      return false unless sort_validator.valid?(@sort)
      search_mode_validator = EnumAttributeValidator.new('String', ['forSale', 'franchiseOpportunity', 'franchiseBrand'])
      return false unless search_mode_validator.valid?(@search_mode)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sort Object to be assigned
    def sort=(sort)
      validator = EnumAttributeValidator.new('String', ['default', 'newestFirst', 'lowTotalPriceFirst', 'hightTotalPriceFirst', 'suburbAsc', 'suburbDesc'])
      unless validator.valid?(sort)
        fail ArgumentError, 'invalid value for "sort", must be one of #{validator.allowable_values}.'
      end
      @sort = sort
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] search_mode Object to be assigned
    def search_mode=(search_mode)
      validator = EnumAttributeValidator.new('String', ['forSale', 'franchiseOpportunity', 'franchiseBrand'])
      unless validator.valid?(search_mode)
        fail ArgumentError, 'invalid value for "search_mode", must be one of #{validator.allowable_values}.'
      end
      @search_mode = search_mode
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          advertiser_id == o.advertiser_id &&
          property_types == o.property_types &&
          keywords == o.keywords &&
          brand_id == o.brand_id &&
          franchise_group_id == o.franchise_group_id &&
          locations == o.locations &&
          page == o.page &&
          page_size == o.page_size &&
          price == o.price &&
          sort == o.sort &&
          search_mode == o.search_mode
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [advertiser_id, property_types, keywords, brand_id, franchise_group_id, locations, page, page_size, price, sort, search_mode].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = DomainClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
