=begin
#Domain Group API V1

#Provides public access to Domain's microservices

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.9

=end

require 'date'

module DomainClient
  # offered units details
  class DomainListingAdminServiceV1ModelSpecificUnitDetail
    # Occupancy type
    attr_accessor :occupancy

    # Price unit type
    attr_accessor :price_unit

    # Unit number
    attr_accessor :name

    # Unit size
    attr_accessor :size

    # Unit price
    attr_accessor :price

    # Additional notes
    attr_accessor :notes

    # Is it available?
    attr_accessor :is_sold_or_leased

    # Lease price for sale or lease
    attr_accessor :lease_price_for_saleor_lease

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'occupancy' => :'occupancy',
        :'price_unit' => :'priceUnit',
        :'name' => :'name',
        :'size' => :'size',
        :'price' => :'price',
        :'notes' => :'notes',
        :'is_sold_or_leased' => :'isSoldOrLeased',
        :'lease_price_for_saleor_lease' => :'leasePriceForSaleorLease'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'occupancy' => :'String',
        :'price_unit' => :'String',
        :'name' => :'String',
        :'size' => :'Integer',
        :'price' => :'Float',
        :'notes' => :'String',
        :'is_sold_or_leased' => :'BOOLEAN',
        :'lease_price_for_saleor_lease' => :'Float'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'occupancy')
        self.occupancy = attributes[:'occupancy']
      end

      if attributes.has_key?(:'priceUnit')
        self.price_unit = attributes[:'priceUnit']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'size')
        self.size = attributes[:'size']
      end

      if attributes.has_key?(:'price')
        self.price = attributes[:'price']
      end

      if attributes.has_key?(:'notes')
        self.notes = attributes[:'notes']
      end

      if attributes.has_key?(:'isSoldOrLeased')
        self.is_sold_or_leased = attributes[:'isSoldOrLeased']
      end

      if attributes.has_key?(:'leasePriceForSaleorLease')
        self.lease_price_for_saleor_lease = attributes[:'leasePriceForSaleorLease']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      occupancy_validator = EnumAttributeValidator.new('String', ['tenanted', 'vacant'])
      return false unless occupancy_validator.valid?(@occupancy)
      price_unit_validator = EnumAttributeValidator.new('String', ['totalAmount', 'perSqm'])
      return false unless price_unit_validator.valid?(@price_unit)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] occupancy Object to be assigned
    def occupancy=(occupancy)
      validator = EnumAttributeValidator.new('String', ['tenanted', 'vacant'])
      unless validator.valid?(occupancy)
        fail ArgumentError, 'invalid value for "occupancy", must be one of #{validator.allowable_values}.'
      end
      @occupancy = occupancy
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] price_unit Object to be assigned
    def price_unit=(price_unit)
      validator = EnumAttributeValidator.new('String', ['totalAmount', 'perSqm'])
      unless validator.valid?(price_unit)
        fail ArgumentError, 'invalid value for "price_unit", must be one of #{validator.allowable_values}.'
      end
      @price_unit = price_unit
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          occupancy == o.occupancy &&
          price_unit == o.price_unit &&
          name == o.name &&
          size == o.size &&
          price == o.price &&
          notes == o.notes &&
          is_sold_or_leased == o.is_sold_or_leased &&
          lease_price_for_saleor_lease == o.lease_price_for_saleor_lease
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [occupancy, price_unit, name, size, price, notes, is_sold_or_leased, lease_price_for_saleor_lease].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = DomainClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
