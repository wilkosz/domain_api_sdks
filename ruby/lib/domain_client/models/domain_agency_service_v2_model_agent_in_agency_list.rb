=begin
#Domain Group API V1

#Provides public access to Domain's microservices

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.9

=end

require 'date'

module DomainClient
  class DomainAgencyServiceV2ModelAgentInAgencyList
    attr_accessor :date_updated

    attr_accessor :agency_id

    attr_accessor :id

    attr_accessor :email

    attr_accessor :first_name

    attr_accessor :mobile

    attr_accessor :photo

    attr_accessor :last_name

    attr_accessor :is_active_profile_page

    attr_accessor :phone

    attr_accessor :sale_active

    attr_accessor :rental_active

    attr_accessor :secondary_email

    attr_accessor :facebook_url

    attr_accessor :twitter_url

    attr_accessor :agent_video

    attr_accessor :profile_text

    attr_accessor :is_hide_sold_leased_listings

    attr_accessor :google_plus_url

    attr_accessor :personal_website_url

    attr_accessor :linked_in_url

    attr_accessor :fax

    attr_accessor :mug_shot_new

    attr_accessor :contact_type_code

    attr_accessor :receives_requests

    attr_accessor :cre_agent_video_url

    attr_accessor :receive_scheduled_report_email

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'date_updated' => :'dateUpdated',
        :'agency_id' => :'agencyId',
        :'id' => :'id',
        :'email' => :'email',
        :'first_name' => :'firstName',
        :'mobile' => :'mobile',
        :'photo' => :'photo',
        :'last_name' => :'lastName',
        :'is_active_profile_page' => :'isActiveProfilePage',
        :'phone' => :'phone',
        :'sale_active' => :'saleActive',
        :'rental_active' => :'rentalActive',
        :'secondary_email' => :'secondaryEmail',
        :'facebook_url' => :'facebookUrl',
        :'twitter_url' => :'twitterUrl',
        :'agent_video' => :'agentVideo',
        :'profile_text' => :'profileText',
        :'is_hide_sold_leased_listings' => :'isHideSoldLeasedListings',
        :'google_plus_url' => :'googlePlusUrl',
        :'personal_website_url' => :'personalWebsiteUrl',
        :'linked_in_url' => :'linkedInUrl',
        :'fax' => :'fax',
        :'mug_shot_new' => :'mugShotNew',
        :'contact_type_code' => :'contactTypeCode',
        :'receives_requests' => :'receivesRequests',
        :'cre_agent_video_url' => :'creAgentVideoURL',
        :'receive_scheduled_report_email' => :'receiveScheduledReportEmail'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'date_updated' => :'DateTime',
        :'agency_id' => :'Integer',
        :'id' => :'Integer',
        :'email' => :'String',
        :'first_name' => :'String',
        :'mobile' => :'String',
        :'photo' => :'String',
        :'last_name' => :'String',
        :'is_active_profile_page' => :'String',
        :'phone' => :'String',
        :'sale_active' => :'BOOLEAN',
        :'rental_active' => :'BOOLEAN',
        :'secondary_email' => :'String',
        :'facebook_url' => :'String',
        :'twitter_url' => :'String',
        :'agent_video' => :'String',
        :'profile_text' => :'String',
        :'is_hide_sold_leased_listings' => :'BOOLEAN',
        :'google_plus_url' => :'String',
        :'personal_website_url' => :'String',
        :'linked_in_url' => :'String',
        :'fax' => :'String',
        :'mug_shot_new' => :'String',
        :'contact_type_code' => :'Integer',
        :'receives_requests' => :'BOOLEAN',
        :'cre_agent_video_url' => :'String',
        :'receive_scheduled_report_email' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'dateUpdated')
        self.date_updated = attributes[:'dateUpdated']
      end

      if attributes.has_key?(:'agencyId')
        self.agency_id = attributes[:'agencyId']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.has_key?(:'firstName')
        self.first_name = attributes[:'firstName']
      end

      if attributes.has_key?(:'mobile')
        self.mobile = attributes[:'mobile']
      end

      if attributes.has_key?(:'photo')
        self.photo = attributes[:'photo']
      end

      if attributes.has_key?(:'lastName')
        self.last_name = attributes[:'lastName']
      end

      if attributes.has_key?(:'isActiveProfilePage')
        self.is_active_profile_page = attributes[:'isActiveProfilePage']
      end

      if attributes.has_key?(:'phone')
        self.phone = attributes[:'phone']
      end

      if attributes.has_key?(:'saleActive')
        self.sale_active = attributes[:'saleActive']
      end

      if attributes.has_key?(:'rentalActive')
        self.rental_active = attributes[:'rentalActive']
      end

      if attributes.has_key?(:'secondaryEmail')
        self.secondary_email = attributes[:'secondaryEmail']
      end

      if attributes.has_key?(:'facebookUrl')
        self.facebook_url = attributes[:'facebookUrl']
      end

      if attributes.has_key?(:'twitterUrl')
        self.twitter_url = attributes[:'twitterUrl']
      end

      if attributes.has_key?(:'agentVideo')
        self.agent_video = attributes[:'agentVideo']
      end

      if attributes.has_key?(:'profileText')
        self.profile_text = attributes[:'profileText']
      end

      if attributes.has_key?(:'isHideSoldLeasedListings')
        self.is_hide_sold_leased_listings = attributes[:'isHideSoldLeasedListings']
      end

      if attributes.has_key?(:'googlePlusUrl')
        self.google_plus_url = attributes[:'googlePlusUrl']
      end

      if attributes.has_key?(:'personalWebsiteUrl')
        self.personal_website_url = attributes[:'personalWebsiteUrl']
      end

      if attributes.has_key?(:'linkedInUrl')
        self.linked_in_url = attributes[:'linkedInUrl']
      end

      if attributes.has_key?(:'fax')
        self.fax = attributes[:'fax']
      end

      if attributes.has_key?(:'mugShotNew')
        self.mug_shot_new = attributes[:'mugShotNew']
      end

      if attributes.has_key?(:'contactTypeCode')
        self.contact_type_code = attributes[:'contactTypeCode']
      end

      if attributes.has_key?(:'receivesRequests')
        self.receives_requests = attributes[:'receivesRequests']
      end

      if attributes.has_key?(:'creAgentVideoURL')
        self.cre_agent_video_url = attributes[:'creAgentVideoURL']
      end

      if attributes.has_key?(:'receiveScheduledReportEmail')
        self.receive_scheduled_report_email = attributes[:'receiveScheduledReportEmail']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          date_updated == o.date_updated &&
          agency_id == o.agency_id &&
          id == o.id &&
          email == o.email &&
          first_name == o.first_name &&
          mobile == o.mobile &&
          photo == o.photo &&
          last_name == o.last_name &&
          is_active_profile_page == o.is_active_profile_page &&
          phone == o.phone &&
          sale_active == o.sale_active &&
          rental_active == o.rental_active &&
          secondary_email == o.secondary_email &&
          facebook_url == o.facebook_url &&
          twitter_url == o.twitter_url &&
          agent_video == o.agent_video &&
          profile_text == o.profile_text &&
          is_hide_sold_leased_listings == o.is_hide_sold_leased_listings &&
          google_plus_url == o.google_plus_url &&
          personal_website_url == o.personal_website_url &&
          linked_in_url == o.linked_in_url &&
          fax == o.fax &&
          mug_shot_new == o.mug_shot_new &&
          contact_type_code == o.contact_type_code &&
          receives_requests == o.receives_requests &&
          cre_agent_video_url == o.cre_agent_video_url &&
          receive_scheduled_report_email == o.receive_scheduled_report_email
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [date_updated, agency_id, id, email, first_name, mobile, photo, last_name, is_active_profile_page, phone, sale_active, rental_active, secondary_email, facebook_url, twitter_url, agent_video, profile_text, is_hide_sold_leased_listings, google_plus_url, personal_website_url, linked_in_url, fax, mug_shot_new, contact_type_code, receives_requests, cre_agent_video_url, receive_scheduled_report_email].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = DomainClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
