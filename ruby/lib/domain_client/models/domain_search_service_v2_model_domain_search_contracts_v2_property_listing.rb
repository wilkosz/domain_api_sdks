=begin
#Domain Group API V1

#Provides public access to Domain's microservices

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.9

=end

require 'date'

module DomainClient
  class DomainSearchServiceV2ModelDomainSearchContractsV2PropertyListing
    attr_accessor :promo_level

    attr_accessor :listing_type

    attr_accessor :id

    attr_accessor :project_id

    attr_accessor :advertiser

    attr_accessor :price_details

    attr_accessor :media

    attr_accessor :property_details

    attr_accessor :headline

    attr_accessor :summary_description

    attr_accessor :has_floorplan

    attr_accessor :has_video

    attr_accessor :labels

    attr_accessor :auction_schedule

    attr_accessor :inspection_schedule

    attr_accessor :sold_data

    attr_accessor :listing_slug

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'promo_level' => :'promoLevel',
        :'listing_type' => :'listingType',
        :'id' => :'id',
        :'project_id' => :'projectId',
        :'advertiser' => :'advertiser',
        :'price_details' => :'priceDetails',
        :'media' => :'media',
        :'property_details' => :'propertyDetails',
        :'headline' => :'headline',
        :'summary_description' => :'summaryDescription',
        :'has_floorplan' => :'hasFloorplan',
        :'has_video' => :'hasVideo',
        :'labels' => :'labels',
        :'auction_schedule' => :'auctionSchedule',
        :'inspection_schedule' => :'inspectionSchedule',
        :'sold_data' => :'soldData',
        :'listing_slug' => :'listingSlug'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'promo_level' => :'String',
        :'listing_type' => :'String',
        :'id' => :'Integer',
        :'project_id' => :'Integer',
        :'advertiser' => :'DomainSearchServiceV2ModelDomainSearchContractsV2Advertiser',
        :'price_details' => :'DomainSearchServiceV2ModelDomainSearchContractsV2PriceDetails',
        :'media' => :'Array<DomainSearchServiceV2ModelDomainSearchContractsV2Media>',
        :'property_details' => :'DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails',
        :'headline' => :'String',
        :'summary_description' => :'String',
        :'has_floorplan' => :'BOOLEAN',
        :'has_video' => :'BOOLEAN',
        :'labels' => :'Array<String>',
        :'auction_schedule' => :'DomainSearchServiceV2ModelDomainSearchContractsV2AuctionSchedule',
        :'inspection_schedule' => :'DomainSearchServiceV2ModelDomainSearchContractsV2InspectionSchedule',
        :'sold_data' => :'DomainSearchServiceV2ModelDomainSearchContractsV2SoldData',
        :'listing_slug' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'promoLevel')
        self.promo_level = attributes[:'promoLevel']
      end

      if attributes.has_key?(:'listingType')
        self.listing_type = attributes[:'listingType']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'projectId')
        self.project_id = attributes[:'projectId']
      end

      if attributes.has_key?(:'advertiser')
        self.advertiser = attributes[:'advertiser']
      end

      if attributes.has_key?(:'priceDetails')
        self.price_details = attributes[:'priceDetails']
      end

      if attributes.has_key?(:'media')
        if (value = attributes[:'media']).is_a?(Array)
          self.media = value
        end
      end

      if attributes.has_key?(:'propertyDetails')
        self.property_details = attributes[:'propertyDetails']
      end

      if attributes.has_key?(:'headline')
        self.headline = attributes[:'headline']
      end

      if attributes.has_key?(:'summaryDescription')
        self.summary_description = attributes[:'summaryDescription']
      end

      if attributes.has_key?(:'hasFloorplan')
        self.has_floorplan = attributes[:'hasFloorplan']
      end

      if attributes.has_key?(:'hasVideo')
        self.has_video = attributes[:'hasVideo']
      end

      if attributes.has_key?(:'labels')
        if (value = attributes[:'labels']).is_a?(Array)
          self.labels = value
        end
      end

      if attributes.has_key?(:'auctionSchedule')
        self.auction_schedule = attributes[:'auctionSchedule']
      end

      if attributes.has_key?(:'inspectionSchedule')
        self.inspection_schedule = attributes[:'inspectionSchedule']
      end

      if attributes.has_key?(:'soldData')
        self.sold_data = attributes[:'soldData']
      end

      if attributes.has_key?(:'listingSlug')
        self.listing_slug = attributes[:'listingSlug']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      promo_level_validator = EnumAttributeValidator.new('String', ['Standard', 'StandardPP', 'Elite', 'ElitePP', 'PremiumPlus'])
      return false unless promo_level_validator.valid?(@promo_level)
      listing_type_validator = EnumAttributeValidator.new('String', ['Sale', 'Rent', 'Share', 'Sold', 'NewHomes'])
      return false unless listing_type_validator.valid?(@listing_type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] promo_level Object to be assigned
    def promo_level=(promo_level)
      validator = EnumAttributeValidator.new('String', ['Standard', 'StandardPP', 'Elite', 'ElitePP', 'PremiumPlus'])
      unless validator.valid?(promo_level)
        fail ArgumentError, 'invalid value for "promo_level", must be one of #{validator.allowable_values}.'
      end
      @promo_level = promo_level
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] listing_type Object to be assigned
    def listing_type=(listing_type)
      validator = EnumAttributeValidator.new('String', ['Sale', 'Rent', 'Share', 'Sold', 'NewHomes'])
      unless validator.valid?(listing_type)
        fail ArgumentError, 'invalid value for "listing_type", must be one of #{validator.allowable_values}.'
      end
      @listing_type = listing_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          promo_level == o.promo_level &&
          listing_type == o.listing_type &&
          id == o.id &&
          project_id == o.project_id &&
          advertiser == o.advertiser &&
          price_details == o.price_details &&
          media == o.media &&
          property_details == o.property_details &&
          headline == o.headline &&
          summary_description == o.summary_description &&
          has_floorplan == o.has_floorplan &&
          has_video == o.has_video &&
          labels == o.labels &&
          auction_schedule == o.auction_schedule &&
          inspection_schedule == o.inspection_schedule &&
          sold_data == o.sold_data &&
          listing_slug == o.listing_slug
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [promo_level, listing_type, id, project_id, advertiser, price_details, media, property_details, headline, summary_description, has_floorplan, has_video, labels, auction_schedule, inspection_schedule, sold_data, listing_slug].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = DomainClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
