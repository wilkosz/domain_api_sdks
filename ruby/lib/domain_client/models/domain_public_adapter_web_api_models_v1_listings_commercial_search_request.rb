=begin
#Domain Group API V1

#Provides public access to Domain's microservices

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.9

=end

require 'date'

module DomainClient
  # Listing search criteria
  class DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest
    # Agency ID
    attr_accessor :advertiser_id

    # Search result page number
    attr_accessor :page

    # Search results page size
    attr_accessor :page_size

    # Listing property types
    attr_accessor :property_types

    # Price search criteria
    attr_accessor :price

    # Location search criteria
    attr_accessor :locations

    # Search listings by keyword
    attr_accessor :keywords

    # Geospatial search (polygon)
    attr_accessor :geo_window

    # Minimum land area
    attr_accessor :land_area_min

    # Maximum land area
    attr_accessor :land_area_max

    # Minimum building area
    attr_accessor :building_size_min

    # Maximum building area
    attr_accessor :building_size_max

    # Search mode
    attr_accessor :search_mode

    # Occupancy
    attr_accessor :occupancy

    # Sorting order
    attr_accessor :sort

    # Sale type
    attr_accessor :sale_type

    # Property title
    attr_accessor :property_title

    # Parking search criteria
    attr_accessor :parking

    # Exclusion Types
    attr_accessor :exclusion_types

    # Minimum annual return (in percents)
    attr_accessor :annual_return

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'advertiser_id' => :'advertiserId',
        :'page' => :'page',
        :'page_size' => :'pageSize',
        :'property_types' => :'propertyTypes',
        :'price' => :'price',
        :'locations' => :'locations',
        :'keywords' => :'keywords',
        :'geo_window' => :'geoWindow',
        :'land_area_min' => :'landAreaMin',
        :'land_area_max' => :'landAreaMax',
        :'building_size_min' => :'buildingSizeMin',
        :'building_size_max' => :'buildingSizeMax',
        :'search_mode' => :'searchMode',
        :'occupancy' => :'occupancy',
        :'sort' => :'sort',
        :'sale_type' => :'saleType',
        :'property_title' => :'propertyTitle',
        :'parking' => :'parking',
        :'exclusion_types' => :'exclusionTypes',
        :'annual_return' => :'annualReturn'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'advertiser_id' => :'Integer',
        :'page' => :'Integer',
        :'page_size' => :'Integer',
        :'property_types' => :'Array<String>',
        :'price' => :'DomainPublicAdapterWebApiModelsV1ListingsCommercialPriceSearch',
        :'locations' => :'Array<DomainPublicAdapterWebApiModelsV1ListingsCommercialLocationSearch>',
        :'keywords' => :'Array<String>',
        :'geo_window' => :'DomainPublicAdapterWebApiModelsV1ListingsCommercialGeoWindow',
        :'land_area_min' => :'Integer',
        :'land_area_max' => :'Integer',
        :'building_size_min' => :'Integer',
        :'building_size_max' => :'Integer',
        :'search_mode' => :'String',
        :'occupancy' => :'String',
        :'sort' => :'String',
        :'sale_type' => :'String',
        :'property_title' => :'String',
        :'parking' => :'DomainPublicAdapterWebApiModelsV1ListingsCommercialParkingSearch',
        :'exclusion_types' => :'Array<String>',
        :'annual_return' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'advertiserId')
        self.advertiser_id = attributes[:'advertiserId']
      end

      if attributes.has_key?(:'page')
        self.page = attributes[:'page']
      end

      if attributes.has_key?(:'pageSize')
        self.page_size = attributes[:'pageSize']
      end

      if attributes.has_key?(:'propertyTypes')
        if (value = attributes[:'propertyTypes']).is_a?(Array)
          self.property_types = value
        end
      end

      if attributes.has_key?(:'price')
        self.price = attributes[:'price']
      end

      if attributes.has_key?(:'locations')
        if (value = attributes[:'locations']).is_a?(Array)
          self.locations = value
        end
      end

      if attributes.has_key?(:'keywords')
        if (value = attributes[:'keywords']).is_a?(Array)
          self.keywords = value
        end
      end

      if attributes.has_key?(:'geoWindow')
        self.geo_window = attributes[:'geoWindow']
      end

      if attributes.has_key?(:'landAreaMin')
        self.land_area_min = attributes[:'landAreaMin']
      end

      if attributes.has_key?(:'landAreaMax')
        self.land_area_max = attributes[:'landAreaMax']
      end

      if attributes.has_key?(:'buildingSizeMin')
        self.building_size_min = attributes[:'buildingSizeMin']
      end

      if attributes.has_key?(:'buildingSizeMax')
        self.building_size_max = attributes[:'buildingSizeMax']
      end

      if attributes.has_key?(:'searchMode')
        self.search_mode = attributes[:'searchMode']
      end

      if attributes.has_key?(:'occupancy')
        self.occupancy = attributes[:'occupancy']
      end

      if attributes.has_key?(:'sort')
        self.sort = attributes[:'sort']
      end

      if attributes.has_key?(:'saleType')
        self.sale_type = attributes[:'saleType']
      end

      if attributes.has_key?(:'propertyTitle')
        self.property_title = attributes[:'propertyTitle']
      end

      if attributes.has_key?(:'parking')
        self.parking = attributes[:'parking']
      end

      if attributes.has_key?(:'exclusionTypes')
        if (value = attributes[:'exclusionTypes']).is_a?(Array)
          self.exclusion_types = value
        end
      end

      if attributes.has_key?(:'annualReturn')
        self.annual_return = attributes[:'annualReturn']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      search_mode_validator = EnumAttributeValidator.new('String', ['forSale', 'forLease', 'sold', 'leased'])
      return false unless search_mode_validator.valid?(@search_mode)
      sort_validator = EnumAttributeValidator.new('String', ['default', 'newestFirst', 'cheapestTotalFirst', 'cheapestPerSqmFirst', 'mostExpensiveTotalFirst', 'mostExpensivePerSqmFirst', 'suburbAsc', 'suburbDesc', 'buildingSizeAsc', 'buildingSizeDesc'])
      return false unless sort_validator.valid?(@sort)
      sale_type_validator = EnumAttributeValidator.new('String', ['standardSale', 'auction', 'expressionOfInterest', 'tender'])
      return false unless sale_type_validator.valid?(@sale_type)
      property_title_validator = EnumAttributeValidator.new('String', ['freehold', 'strata', 'noBuilding'])
      return false unless property_title_validator.valid?(@property_title)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] search_mode Object to be assigned
    def search_mode=(search_mode)
      validator = EnumAttributeValidator.new('String', ['forSale', 'forLease', 'sold', 'leased'])
      unless validator.valid?(search_mode)
        fail ArgumentError, 'invalid value for "search_mode", must be one of #{validator.allowable_values}.'
      end
      @search_mode = search_mode
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sort Object to be assigned
    def sort=(sort)
      validator = EnumAttributeValidator.new('String', ['default', 'newestFirst', 'cheapestTotalFirst', 'cheapestPerSqmFirst', 'mostExpensiveTotalFirst', 'mostExpensivePerSqmFirst', 'suburbAsc', 'suburbDesc', 'buildingSizeAsc', 'buildingSizeDesc'])
      unless validator.valid?(sort)
        fail ArgumentError, 'invalid value for "sort", must be one of #{validator.allowable_values}.'
      end
      @sort = sort
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sale_type Object to be assigned
    def sale_type=(sale_type)
      validator = EnumAttributeValidator.new('String', ['standardSale', 'auction', 'expressionOfInterest', 'tender'])
      unless validator.valid?(sale_type)
        fail ArgumentError, 'invalid value for "sale_type", must be one of #{validator.allowable_values}.'
      end
      @sale_type = sale_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] property_title Object to be assigned
    def property_title=(property_title)
      validator = EnumAttributeValidator.new('String', ['freehold', 'strata', 'noBuilding'])
      unless validator.valid?(property_title)
        fail ArgumentError, 'invalid value for "property_title", must be one of #{validator.allowable_values}.'
      end
      @property_title = property_title
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          advertiser_id == o.advertiser_id &&
          page == o.page &&
          page_size == o.page_size &&
          property_types == o.property_types &&
          price == o.price &&
          locations == o.locations &&
          keywords == o.keywords &&
          geo_window == o.geo_window &&
          land_area_min == o.land_area_min &&
          land_area_max == o.land_area_max &&
          building_size_min == o.building_size_min &&
          building_size_max == o.building_size_max &&
          search_mode == o.search_mode &&
          occupancy == o.occupancy &&
          sort == o.sort &&
          sale_type == o.sale_type &&
          property_title == o.property_title &&
          parking == o.parking &&
          exclusion_types == o.exclusion_types &&
          annual_return == o.annual_return
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [advertiser_id, page, page_size, property_types, price, locations, keywords, geo_window, land_area_min, land_area_max, building_size_min, building_size_max, search_mode, occupancy, sort, sale_type, property_title, parking, exclusion_types, annual_return].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = DomainClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
