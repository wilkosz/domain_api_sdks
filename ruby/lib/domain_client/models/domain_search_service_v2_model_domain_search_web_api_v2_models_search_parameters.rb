=begin
#Domain Group API V1

#Provides public access to Domain's microservices

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.9

=end

require 'date'

module DomainClient
  class DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters
    attr_accessor :listing_type

    attr_accessor :property_types

    attr_accessor :property_features

    attr_accessor :listing_attributes

    attr_accessor :property_established_type

    attr_accessor :min_bedrooms

    attr_accessor :max_bedrooms

    attr_accessor :min_bathrooms

    attr_accessor :max_bathrooms

    attr_accessor :min_carspaces

    attr_accessor :max_carspaces

    attr_accessor :min_price

    attr_accessor :max_price

    attr_accessor :min_land_area

    attr_accessor :max_land_area

    attr_accessor :advertiser_ids

    attr_accessor :ad_ids

    attr_accessor :exclude_ad_ids

    attr_accessor :locations

    attr_accessor :location_terms

    attr_accessor :keywords

    attr_accessor :new_dev_only

    attr_accessor :inspection_from

    attr_accessor :inspection_to

    attr_accessor :auction_from

    attr_accessor :auction_to

    attr_accessor :rural_only

    attr_accessor :exclude_price_withheld

    attr_accessor :sort

    attr_accessor :page

    attr_accessor :page_size

    attr_accessor :geo_window

    attr_accessor :updated_since

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'listing_type' => :'listingType',
        :'property_types' => :'propertyTypes',
        :'property_features' => :'propertyFeatures',
        :'listing_attributes' => :'listingAttributes',
        :'property_established_type' => :'propertyEstablishedType',
        :'min_bedrooms' => :'minBedrooms',
        :'max_bedrooms' => :'maxBedrooms',
        :'min_bathrooms' => :'minBathrooms',
        :'max_bathrooms' => :'maxBathrooms',
        :'min_carspaces' => :'minCarspaces',
        :'max_carspaces' => :'maxCarspaces',
        :'min_price' => :'minPrice',
        :'max_price' => :'maxPrice',
        :'min_land_area' => :'minLandArea',
        :'max_land_area' => :'maxLandArea',
        :'advertiser_ids' => :'advertiserIds',
        :'ad_ids' => :'adIds',
        :'exclude_ad_ids' => :'excludeAdIds',
        :'locations' => :'locations',
        :'location_terms' => :'locationTerms',
        :'keywords' => :'keywords',
        :'new_dev_only' => :'newDevOnly',
        :'inspection_from' => :'inspectionFrom',
        :'inspection_to' => :'inspectionTo',
        :'auction_from' => :'auctionFrom',
        :'auction_to' => :'auctionTo',
        :'rural_only' => :'ruralOnly',
        :'exclude_price_withheld' => :'excludePriceWithheld',
        :'sort' => :'sort',
        :'page' => :'page',
        :'page_size' => :'pageSize',
        :'geo_window' => :'geoWindow',
        :'updated_since' => :'updatedSince'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'listing_type' => :'String',
        :'property_types' => :'Array<String>',
        :'property_features' => :'Array<String>',
        :'listing_attributes' => :'Array<String>',
        :'property_established_type' => :'String',
        :'min_bedrooms' => :'Float',
        :'max_bedrooms' => :'Float',
        :'min_bathrooms' => :'Float',
        :'max_bathrooms' => :'Float',
        :'min_carspaces' => :'Integer',
        :'max_carspaces' => :'Integer',
        :'min_price' => :'Integer',
        :'max_price' => :'Integer',
        :'min_land_area' => :'Integer',
        :'max_land_area' => :'Integer',
        :'advertiser_ids' => :'Array<Integer>',
        :'ad_ids' => :'Array<Integer>',
        :'exclude_ad_ids' => :'Array<Integer>',
        :'locations' => :'Array<DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation>',
        :'location_terms' => :'String',
        :'keywords' => :'Array<String>',
        :'new_dev_only' => :'BOOLEAN',
        :'inspection_from' => :'DateTime',
        :'inspection_to' => :'DateTime',
        :'auction_from' => :'DateTime',
        :'auction_to' => :'DateTime',
        :'rural_only' => :'BOOLEAN',
        :'exclude_price_withheld' => :'BOOLEAN',
        :'sort' => :'DomainSearchServiceV2ModelSystemNullableDomainSearchWebApiV2ModelsSortBy',
        :'page' => :'Integer',
        :'page_size' => :'Integer',
        :'geo_window' => :'DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsGeoWindow',
        :'updated_since' => :'DateTime'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'listingType')
        self.listing_type = attributes[:'listingType']
      end

      if attributes.has_key?(:'propertyTypes')
        if (value = attributes[:'propertyTypes']).is_a?(Array)
          self.property_types = value
        end
      end

      if attributes.has_key?(:'propertyFeatures')
        if (value = attributes[:'propertyFeatures']).is_a?(Array)
          self.property_features = value
        end
      end

      if attributes.has_key?(:'listingAttributes')
        if (value = attributes[:'listingAttributes']).is_a?(Array)
          self.listing_attributes = value
        end
      end

      if attributes.has_key?(:'propertyEstablishedType')
        self.property_established_type = attributes[:'propertyEstablishedType']
      end

      if attributes.has_key?(:'minBedrooms')
        self.min_bedrooms = attributes[:'minBedrooms']
      end

      if attributes.has_key?(:'maxBedrooms')
        self.max_bedrooms = attributes[:'maxBedrooms']
      end

      if attributes.has_key?(:'minBathrooms')
        self.min_bathrooms = attributes[:'minBathrooms']
      end

      if attributes.has_key?(:'maxBathrooms')
        self.max_bathrooms = attributes[:'maxBathrooms']
      end

      if attributes.has_key?(:'minCarspaces')
        self.min_carspaces = attributes[:'minCarspaces']
      end

      if attributes.has_key?(:'maxCarspaces')
        self.max_carspaces = attributes[:'maxCarspaces']
      end

      if attributes.has_key?(:'minPrice')
        self.min_price = attributes[:'minPrice']
      end

      if attributes.has_key?(:'maxPrice')
        self.max_price = attributes[:'maxPrice']
      end

      if attributes.has_key?(:'minLandArea')
        self.min_land_area = attributes[:'minLandArea']
      end

      if attributes.has_key?(:'maxLandArea')
        self.max_land_area = attributes[:'maxLandArea']
      end

      if attributes.has_key?(:'advertiserIds')
        if (value = attributes[:'advertiserIds']).is_a?(Array)
          self.advertiser_ids = value
        end
      end

      if attributes.has_key?(:'adIds')
        if (value = attributes[:'adIds']).is_a?(Array)
          self.ad_ids = value
        end
      end

      if attributes.has_key?(:'excludeAdIds')
        if (value = attributes[:'excludeAdIds']).is_a?(Array)
          self.exclude_ad_ids = value
        end
      end

      if attributes.has_key?(:'locations')
        if (value = attributes[:'locations']).is_a?(Array)
          self.locations = value
        end
      end

      if attributes.has_key?(:'locationTerms')
        self.location_terms = attributes[:'locationTerms']
      end

      if attributes.has_key?(:'keywords')
        if (value = attributes[:'keywords']).is_a?(Array)
          self.keywords = value
        end
      end

      if attributes.has_key?(:'newDevOnly')
        self.new_dev_only = attributes[:'newDevOnly']
      end

      if attributes.has_key?(:'inspectionFrom')
        self.inspection_from = attributes[:'inspectionFrom']
      end

      if attributes.has_key?(:'inspectionTo')
        self.inspection_to = attributes[:'inspectionTo']
      end

      if attributes.has_key?(:'auctionFrom')
        self.auction_from = attributes[:'auctionFrom']
      end

      if attributes.has_key?(:'auctionTo')
        self.auction_to = attributes[:'auctionTo']
      end

      if attributes.has_key?(:'ruralOnly')
        self.rural_only = attributes[:'ruralOnly']
      end

      if attributes.has_key?(:'excludePriceWithheld')
        self.exclude_price_withheld = attributes[:'excludePriceWithheld']
      end

      if attributes.has_key?(:'sort')
        self.sort = attributes[:'sort']
      end

      if attributes.has_key?(:'page')
        self.page = attributes[:'page']
      end

      if attributes.has_key?(:'pageSize')
        self.page_size = attributes[:'pageSize']
      end

      if attributes.has_key?(:'geoWindow')
        self.geo_window = attributes[:'geoWindow']
      end

      if attributes.has_key?(:'updatedSince')
        self.updated_since = attributes[:'updatedSince']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      listing_type_validator = EnumAttributeValidator.new('String', ['Sale', 'Rent', 'Share', 'Sold', 'NewHomes'])
      return false unless listing_type_validator.valid?(@listing_type)
      property_established_type_validator = EnumAttributeValidator.new('String', ['Any', 'New', 'Established'])
      return false unless property_established_type_validator.valid?(@property_established_type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] listing_type Object to be assigned
    def listing_type=(listing_type)
      validator = EnumAttributeValidator.new('String', ['Sale', 'Rent', 'Share', 'Sold', 'NewHomes'])
      unless validator.valid?(listing_type)
        fail ArgumentError, 'invalid value for "listing_type", must be one of #{validator.allowable_values}.'
      end
      @listing_type = listing_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] property_established_type Object to be assigned
    def property_established_type=(property_established_type)
      validator = EnumAttributeValidator.new('String', ['Any', 'New', 'Established'])
      unless validator.valid?(property_established_type)
        fail ArgumentError, 'invalid value for "property_established_type", must be one of #{validator.allowable_values}.'
      end
      @property_established_type = property_established_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          listing_type == o.listing_type &&
          property_types == o.property_types &&
          property_features == o.property_features &&
          listing_attributes == o.listing_attributes &&
          property_established_type == o.property_established_type &&
          min_bedrooms == o.min_bedrooms &&
          max_bedrooms == o.max_bedrooms &&
          min_bathrooms == o.min_bathrooms &&
          max_bathrooms == o.max_bathrooms &&
          min_carspaces == o.min_carspaces &&
          max_carspaces == o.max_carspaces &&
          min_price == o.min_price &&
          max_price == o.max_price &&
          min_land_area == o.min_land_area &&
          max_land_area == o.max_land_area &&
          advertiser_ids == o.advertiser_ids &&
          ad_ids == o.ad_ids &&
          exclude_ad_ids == o.exclude_ad_ids &&
          locations == o.locations &&
          location_terms == o.location_terms &&
          keywords == o.keywords &&
          new_dev_only == o.new_dev_only &&
          inspection_from == o.inspection_from &&
          inspection_to == o.inspection_to &&
          auction_from == o.auction_from &&
          auction_to == o.auction_to &&
          rural_only == o.rural_only &&
          exclude_price_withheld == o.exclude_price_withheld &&
          sort == o.sort &&
          page == o.page &&
          page_size == o.page_size &&
          geo_window == o.geo_window &&
          updated_since == o.updated_since
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [listing_type, property_types, property_features, listing_attributes, property_established_type, min_bedrooms, max_bedrooms, min_bathrooms, max_bathrooms, min_carspaces, max_carspaces, min_price, max_price, min_land_area, max_land_area, advertiser_ids, ad_ids, exclude_ad_ids, locations, location_terms, keywords, new_dev_only, inspection_from, inspection_to, auction_from, auction_to, rural_only, exclude_price_withheld, sort, page, page_size, geo_window, updated_since].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = DomainClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
