=begin
#Domain Group API V1

#Provides public access to Domain's microservices

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.9

=end

require 'date'

module DomainClient
  class DomainLocationProfilesServiceV1ModelLocation
    attr_accessor :domain_location_id

    attr_accessor :postcode

    attr_accessor :pf_location_id

    attr_accessor :surrounding_suburbs

    attr_accessor :url_slug

    attr_accessor :suburb_name

    attr_accessor :data

    attr_accessor :apm_location_id

    attr_accessor :location_id

    attr_accessor :area_name

    attr_accessor :region_name

    attr_accessor :state

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'domain_location_id' => :'domainLocationId',
        :'postcode' => :'postcode',
        :'pf_location_id' => :'pfLocationId',
        :'surrounding_suburbs' => :'surroundingSuburbs',
        :'url_slug' => :'urlSlug',
        :'suburb_name' => :'suburbName',
        :'data' => :'data',
        :'apm_location_id' => :'apmLocationId',
        :'location_id' => :'locationId',
        :'area_name' => :'areaName',
        :'region_name' => :'regionName',
        :'state' => :'state'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'domain_location_id' => :'Integer',
        :'postcode' => :'String',
        :'pf_location_id' => :'String',
        :'surrounding_suburbs' => :'Array<DomainLocationProfilesServiceV1ModelLocationSurroundingSuburbs>',
        :'url_slug' => :'String',
        :'suburb_name' => :'String',
        :'data' => :'DomainLocationProfilesServiceV1ModelLocationData',
        :'apm_location_id' => :'Integer',
        :'location_id' => :'Integer',
        :'area_name' => :'String',
        :'region_name' => :'String',
        :'state' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'domainLocationId')
        self.domain_location_id = attributes[:'domainLocationId']
      end

      if attributes.has_key?(:'postcode')
        self.postcode = attributes[:'postcode']
      end

      if attributes.has_key?(:'pfLocationId')
        self.pf_location_id = attributes[:'pfLocationId']
      end

      if attributes.has_key?(:'surroundingSuburbs')
        if (value = attributes[:'surroundingSuburbs']).is_a?(Array)
          self.surrounding_suburbs = value
        end
      end

      if attributes.has_key?(:'urlSlug')
        self.url_slug = attributes[:'urlSlug']
      end

      if attributes.has_key?(:'suburbName')
        self.suburb_name = attributes[:'suburbName']
      end

      if attributes.has_key?(:'data')
        self.data = attributes[:'data']
      end

      if attributes.has_key?(:'apmLocationId')
        self.apm_location_id = attributes[:'apmLocationId']
      end

      if attributes.has_key?(:'locationId')
        self.location_id = attributes[:'locationId']
      end

      if attributes.has_key?(:'areaName')
        self.area_name = attributes[:'areaName']
      end

      if attributes.has_key?(:'regionName')
        self.region_name = attributes[:'regionName']
      end

      if attributes.has_key?(:'state')
        self.state = attributes[:'state']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          domain_location_id == o.domain_location_id &&
          postcode == o.postcode &&
          pf_location_id == o.pf_location_id &&
          surrounding_suburbs == o.surrounding_suburbs &&
          url_slug == o.url_slug &&
          suburb_name == o.suburb_name &&
          data == o.data &&
          apm_location_id == o.apm_location_id &&
          location_id == o.location_id &&
          area_name == o.area_name &&
          region_name == o.region_name &&
          state == o.state
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [domain_location_id, postcode, pf_location_id, surrounding_suburbs, url_slug, suburb_name, data, apm_location_id, location_id, area_name, region_name, state].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = DomainClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
