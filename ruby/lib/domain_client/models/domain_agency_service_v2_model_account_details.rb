=begin
#Domain Group API V1

#Provides public access to Domain's microservices

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.9

=end

require 'date'

module DomainClient
  class DomainAgencyServiceV2ModelAccountDetails
    attr_accessor :cybersell_number

    attr_accessor :axapta_number

    attr_accessor :ad_marc_number

    attr_accessor :cre_cybersell_number

    attr_accessor :cre_salesforce_ref

    attr_accessor :cre_axapta_number

    attr_accessor :cre_ad_marc_number

    attr_accessor :salesforce_ref

    attr_accessor :cre_account_manager_id

    attr_accessor :status

    attr_accessor :account_manager_id

    attr_accessor :account_manager

    attr_accessor :is_developer

    attr_accessor :media_agency_name

    attr_accessor :media_agency_id

    attr_accessor :sap_id

    attr_accessor :regional_publication_code

    attr_accessor :provider_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'cybersell_number' => :'cybersellNumber',
        :'axapta_number' => :'axaptaNumber',
        :'ad_marc_number' => :'adMarcNumber',
        :'cre_cybersell_number' => :'creCybersellNumber',
        :'cre_salesforce_ref' => :'creSalesforceRef',
        :'cre_axapta_number' => :'creAxaptaNumber',
        :'cre_ad_marc_number' => :'creAdMarcNumber',
        :'salesforce_ref' => :'salesforceRef',
        :'cre_account_manager_id' => :'creAccountManagerId',
        :'status' => :'status',
        :'account_manager_id' => :'accountManagerId',
        :'account_manager' => :'accountManager',
        :'is_developer' => :'isDeveloper',
        :'media_agency_name' => :'mediaAgencyName',
        :'media_agency_id' => :'mediaAgencyId',
        :'sap_id' => :'sapId',
        :'regional_publication_code' => :'regionalPublicationCode',
        :'provider_id' => :'providerId'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'cybersell_number' => :'String',
        :'axapta_number' => :'String',
        :'ad_marc_number' => :'String',
        :'cre_cybersell_number' => :'String',
        :'cre_salesforce_ref' => :'String',
        :'cre_axapta_number' => :'String',
        :'cre_ad_marc_number' => :'String',
        :'salesforce_ref' => :'String',
        :'cre_account_manager_id' => :'Integer',
        :'status' => :'String',
        :'account_manager_id' => :'Integer',
        :'account_manager' => :'Integer',
        :'is_developer' => :'BOOLEAN',
        :'media_agency_name' => :'String',
        :'media_agency_id' => :'String',
        :'sap_id' => :'String',
        :'regional_publication_code' => :'String',
        :'provider_id' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'cybersellNumber')
        self.cybersell_number = attributes[:'cybersellNumber']
      end

      if attributes.has_key?(:'axaptaNumber')
        self.axapta_number = attributes[:'axaptaNumber']
      end

      if attributes.has_key?(:'adMarcNumber')
        self.ad_marc_number = attributes[:'adMarcNumber']
      end

      if attributes.has_key?(:'creCybersellNumber')
        self.cre_cybersell_number = attributes[:'creCybersellNumber']
      end

      if attributes.has_key?(:'creSalesforceRef')
        self.cre_salesforce_ref = attributes[:'creSalesforceRef']
      end

      if attributes.has_key?(:'creAxaptaNumber')
        self.cre_axapta_number = attributes[:'creAxaptaNumber']
      end

      if attributes.has_key?(:'creAdMarcNumber')
        self.cre_ad_marc_number = attributes[:'creAdMarcNumber']
      end

      if attributes.has_key?(:'salesforceRef')
        self.salesforce_ref = attributes[:'salesforceRef']
      end

      if attributes.has_key?(:'creAccountManagerId')
        self.cre_account_manager_id = attributes[:'creAccountManagerId']
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.has_key?(:'accountManagerId')
        self.account_manager_id = attributes[:'accountManagerId']
      end

      if attributes.has_key?(:'accountManager')
        self.account_manager = attributes[:'accountManager']
      end

      if attributes.has_key?(:'isDeveloper')
        self.is_developer = attributes[:'isDeveloper']
      end

      if attributes.has_key?(:'mediaAgencyName')
        self.media_agency_name = attributes[:'mediaAgencyName']
      end

      if attributes.has_key?(:'mediaAgencyId')
        self.media_agency_id = attributes[:'mediaAgencyId']
      end

      if attributes.has_key?(:'sapId')
        self.sap_id = attributes[:'sapId']
      end

      if attributes.has_key?(:'regionalPublicationCode')
        self.regional_publication_code = attributes[:'regionalPublicationCode']
      end

      if attributes.has_key?(:'providerId')
        self.provider_id = attributes[:'providerId']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          cybersell_number == o.cybersell_number &&
          axapta_number == o.axapta_number &&
          ad_marc_number == o.ad_marc_number &&
          cre_cybersell_number == o.cre_cybersell_number &&
          cre_salesforce_ref == o.cre_salesforce_ref &&
          cre_axapta_number == o.cre_axapta_number &&
          cre_ad_marc_number == o.cre_ad_marc_number &&
          salesforce_ref == o.salesforce_ref &&
          cre_account_manager_id == o.cre_account_manager_id &&
          status == o.status &&
          account_manager_id == o.account_manager_id &&
          account_manager == o.account_manager &&
          is_developer == o.is_developer &&
          media_agency_name == o.media_agency_name &&
          media_agency_id == o.media_agency_id &&
          sap_id == o.sap_id &&
          regional_publication_code == o.regional_publication_code &&
          provider_id == o.provider_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [cybersell_number, axapta_number, ad_marc_number, cre_cybersell_number, cre_salesforce_ref, cre_axapta_number, cre_ad_marc_number, salesforce_ref, cre_account_manager_id, status, account_manager_id, account_manager, is_developer, media_agency_name, media_agency_id, sap_id, regional_publication_code, provider_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = DomainClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
