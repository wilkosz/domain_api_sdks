=begin
#Domain Group API V1

#Provides public access to Domain's microservices

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.9

=end

require 'date'

module DomainClient
  # An enquiry with delivery status information
  class DomainPublicAdapterWebApiModelsV1EnquiriesEnquiryReport
    # Recipients of the delivery
    attr_accessor :recipients_delivery_status

    # Delivery method of the enquiry
    attr_accessor :delivery_method

    # Type of enquiry
    attr_accessor :enquiry_type

    # Listing identifier
    attr_accessor :reference_id

    # Enquiry identifier
    attr_accessor :id

    # Sender information
    attr_accessor :sender

    # Enquiry subject
    attr_accessor :subject

    # Enquiry message
    attr_accessor :message

    # MetaData of the enquiry
    attr_accessor :meta_data

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'recipients_delivery_status' => :'recipientsDeliveryStatus',
        :'delivery_method' => :'deliveryMethod',
        :'enquiry_type' => :'enquiryType',
        :'reference_id' => :'referenceId',
        :'id' => :'id',
        :'sender' => :'sender',
        :'subject' => :'subject',
        :'message' => :'message',
        :'meta_data' => :'metaData'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'recipients_delivery_status' => :'Array<DomainPublicAdapterWebApiModelsV1EnquiriesRecipientDeliveryStatus>',
        :'delivery_method' => :'String',
        :'enquiry_type' => :'String',
        :'reference_id' => :'Integer',
        :'id' => :'String',
        :'sender' => :'DomainPublicAdapterWebApiModelsV1EnquiriesSender',
        :'subject' => :'String',
        :'message' => :'String',
        :'meta_data' => :'Hash<String, String>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'recipientsDeliveryStatus')
        if (value = attributes[:'recipientsDeliveryStatus']).is_a?(Array)
          self.recipients_delivery_status = value
        end
      end

      if attributes.has_key?(:'deliveryMethod')
        self.delivery_method = attributes[:'deliveryMethod']
      end

      if attributes.has_key?(:'enquiryType')
        self.enquiry_type = attributes[:'enquiryType']
      end

      if attributes.has_key?(:'referenceId')
        self.reference_id = attributes[:'referenceId']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'sender')
        self.sender = attributes[:'sender']
      end

      if attributes.has_key?(:'subject')
        self.subject = attributes[:'subject']
      end

      if attributes.has_key?(:'message')
        self.message = attributes[:'message']
      end

      if attributes.has_key?(:'metaData')
        if (value = attributes[:'metaData']).is_a?(Hash)
          self.meta_data = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      delivery_method_validator = EnumAttributeValidator.new('String', ['email', 'sms'])
      return false unless delivery_method_validator.valid?(@delivery_method)
      enquiry_type_validator = EnumAttributeValidator.new('String', ['listing', 'devProject', 'newDevLanding', 'agencyProfile', 'agentProfile', 'contractRequest', 'vendorEnquiry'])
      return false unless enquiry_type_validator.valid?(@enquiry_type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] delivery_method Object to be assigned
    def delivery_method=(delivery_method)
      validator = EnumAttributeValidator.new('String', ['email', 'sms'])
      unless validator.valid?(delivery_method)
        fail ArgumentError, 'invalid value for "delivery_method", must be one of #{validator.allowable_values}.'
      end
      @delivery_method = delivery_method
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] enquiry_type Object to be assigned
    def enquiry_type=(enquiry_type)
      validator = EnumAttributeValidator.new('String', ['listing', 'devProject', 'newDevLanding', 'agencyProfile', 'agentProfile', 'contractRequest', 'vendorEnquiry'])
      unless validator.valid?(enquiry_type)
        fail ArgumentError, 'invalid value for "enquiry_type", must be one of #{validator.allowable_values}.'
      end
      @enquiry_type = enquiry_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          recipients_delivery_status == o.recipients_delivery_status &&
          delivery_method == o.delivery_method &&
          enquiry_type == o.enquiry_type &&
          reference_id == o.reference_id &&
          id == o.id &&
          sender == o.sender &&
          subject == o.subject &&
          message == o.message &&
          meta_data == o.meta_data
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [recipients_delivery_status, delivery_method, enquiry_type, reference_id, id, sender, subject, message, meta_data].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = DomainClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
