=begin
#Domain Group API V1

#Provides public access to Domain's microservices

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.9

=end

require 'date'

module DomainClient
  class DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPriceDetails
    attr_accessor :hidden_reasons

    attr_accessor :gst_option

    attr_accessor :price_type

    attr_accessor :price_unit

    attr_accessor :price

    attr_accessor :price_from

    attr_accessor :price_to

    attr_accessor :price_prefix

    attr_accessor :can_display_price

    attr_accessor :display_price

    attr_accessor :bond

    attr_accessor :price_reduction

    attr_accessor :price_from_per_sqm

    attr_accessor :price_to_per_sqm

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'hidden_reasons' => :'hiddenReasons',
        :'gst_option' => :'gstOption',
        :'price_type' => :'priceType',
        :'price_unit' => :'priceUnit',
        :'price' => :'price',
        :'price_from' => :'priceFrom',
        :'price_to' => :'priceTo',
        :'price_prefix' => :'pricePrefix',
        :'can_display_price' => :'canDisplayPrice',
        :'display_price' => :'displayPrice',
        :'bond' => :'bond',
        :'price_reduction' => :'priceReduction',
        :'price_from_per_sqm' => :'priceFromPerSqm',
        :'price_to_per_sqm' => :'priceToPerSqm'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'hidden_reasons' => :'Array<String>',
        :'gst_option' => :'String',
        :'price_type' => :'String',
        :'price_unit' => :'String',
        :'price' => :'Float',
        :'price_from' => :'Integer',
        :'price_to' => :'Integer',
        :'price_prefix' => :'String',
        :'can_display_price' => :'BOOLEAN',
        :'display_price' => :'String',
        :'bond' => :'Float',
        :'price_reduction' => :'BOOLEAN',
        :'price_from_per_sqm' => :'Integer',
        :'price_to_per_sqm' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'hiddenReasons')
        if (value = attributes[:'hiddenReasons']).is_a?(Array)
          self.hidden_reasons = value
        end
      end

      if attributes.has_key?(:'gstOption')
        self.gst_option = attributes[:'gstOption']
      end

      if attributes.has_key?(:'priceType')
        self.price_type = attributes[:'priceType']
      end

      if attributes.has_key?(:'priceUnit')
        self.price_unit = attributes[:'priceUnit']
      end

      if attributes.has_key?(:'price')
        self.price = attributes[:'price']
      end

      if attributes.has_key?(:'priceFrom')
        self.price_from = attributes[:'priceFrom']
      end

      if attributes.has_key?(:'priceTo')
        self.price_to = attributes[:'priceTo']
      end

      if attributes.has_key?(:'pricePrefix')
        self.price_prefix = attributes[:'pricePrefix']
      end

      if attributes.has_key?(:'canDisplayPrice')
        self.can_display_price = attributes[:'canDisplayPrice']
      end

      if attributes.has_key?(:'displayPrice')
        self.display_price = attributes[:'displayPrice']
      end

      if attributes.has_key?(:'bond')
        self.bond = attributes[:'bond']
      end

      if attributes.has_key?(:'priceReduction')
        self.price_reduction = attributes[:'priceReduction']
      end

      if attributes.has_key?(:'priceFromPerSqm')
        self.price_from_per_sqm = attributes[:'priceFromPerSqm']
      end

      if attributes.has_key?(:'priceToPerSqm')
        self.price_to_per_sqm = attributes[:'priceToPerSqm']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      gst_option_validator = EnumAttributeValidator.new('String', ['na', 'inc', 'ex'])
      return false unless gst_option_validator.valid?(@gst_option)
      price_type_validator = EnumAttributeValidator.new('String', ['gross', 'net'])
      return false unless price_type_validator.valid?(@price_type)
      price_unit_validator = EnumAttributeValidator.new('String', ['totalAmount', 'perSqm'])
      return false unless price_unit_validator.valid?(@price_unit)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] gst_option Object to be assigned
    def gst_option=(gst_option)
      validator = EnumAttributeValidator.new('String', ['na', 'inc', 'ex'])
      unless validator.valid?(gst_option)
        fail ArgumentError, 'invalid value for "gst_option", must be one of #{validator.allowable_values}.'
      end
      @gst_option = gst_option
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] price_type Object to be assigned
    def price_type=(price_type)
      validator = EnumAttributeValidator.new('String', ['gross', 'net'])
      unless validator.valid?(price_type)
        fail ArgumentError, 'invalid value for "price_type", must be one of #{validator.allowable_values}.'
      end
      @price_type = price_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] price_unit Object to be assigned
    def price_unit=(price_unit)
      validator = EnumAttributeValidator.new('String', ['totalAmount', 'perSqm'])
      unless validator.valid?(price_unit)
        fail ArgumentError, 'invalid value for "price_unit", must be one of #{validator.allowable_values}.'
      end
      @price_unit = price_unit
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          hidden_reasons == o.hidden_reasons &&
          gst_option == o.gst_option &&
          price_type == o.price_type &&
          price_unit == o.price_unit &&
          price == o.price &&
          price_from == o.price_from &&
          price_to == o.price_to &&
          price_prefix == o.price_prefix &&
          can_display_price == o.can_display_price &&
          display_price == o.display_price &&
          bond == o.bond &&
          price_reduction == o.price_reduction &&
          price_from_per_sqm == o.price_from_per_sqm &&
          price_to_per_sqm == o.price_to_per_sqm
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [hidden_reasons, gst_option, price_type, price_unit, price, price_from, price_to, price_prefix, can_display_price, display_price, bond, price_reduction, price_from_per_sqm, price_to_per_sqm].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = DomainClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
