=begin
#Domain Group API V1

#Provides public access to Domain's microservices

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.9

=end

require 'date'

module DomainClient
  # A searchable property
  class DomainPublicAdapterWebApiModelsV1PropertiesProperty
    # The type of geometry of the Cadastre property.
    attr_accessor :cadastre_type

    # The on market types, if the property is on the market
    attr_accessor :on_market_types

    # The current status of the property.
    attr_accessor :status

    # The full street address of the property
    attr_accessor :address

    # The latitude and longitude of the property
    attr_accessor :address_coordinate

    # The address identifier
    attr_accessor :address_id

    # The current adverts for the property, if on the market
    attr_accessor :adverts

    # Gets or sets the size of the area of land on which the property resides.
    attr_accessor :area_size

    # The number of bathrooms.
    attr_accessor :bathrooms

    # The number of bedrooms.
    attr_accessor :bedrooms

    # The number of car spaces.
    attr_accessor :car_spaces

    # The claim data
    attr_accessor :claim

    # The condition of the property.
    attr_accessor :condition

    # The created date of the property document.
    attr_accessor :created

    # The number of ensuites.
    attr_accessor :ensuites

    # The list of features for the given property
    attr_accessor :features

    # The flat number of the property (if applicable for the property type).
    attr_accessor :flat_number

    # Associated PSMA GNAF identifiers
    attr_accessor :gnaf_ids

    # The history of the property
    attr_accessor :history

    # The property id of the property
    attr_accessor :id

    # The improvements to the property
    attr_accessor :improvements

    # The floorplan area of the property.
    attr_accessor :internal_area

    # Indicates whether this property is residential.
    attr_accessor :is_residential

    # The land use.
    attr_accessor :land_use

    # The lot number for the property.
    attr_accessor :lot_number

    # A collection of photos of the property.
    attr_accessor :photos

    # The plan number.
    attr_accessor :plan_number

    # The postcode of the property
    attr_accessor :postcode

    # The property category.
    attr_accessor :property_category

    # The property category identifier
    attr_accessor :property_category_id

    # The type of the property.
    attr_accessor :property_type

    # The property type identifier.
    attr_accessor :property_type_id

    # The number of rooms.
    attr_accessor :rooms

    # The section number.
    attr_accessor :section_number

    # The state in which the property resides
    attr_accessor :state

    # The number of storeys.
    attr_accessor :storeys

    # Gets the address for search.
    attr_accessor :street_address

    # The name of the street in which the property resides.
    attr_accessor :street_name

    # The street number of the property.
    attr_accessor :street_number

    # The street type name e.g. St.
    attr_accessor :street_type

    # The long street type name e.g. Street.
    attr_accessor :street_type_long

    # The suburb in which the property resides.
    attr_accessor :suburb

    # The identifier for the suburb in which the property resides.
    attr_accessor :suburb_id

    # The title for the property.
    attr_accessor :title

    # The last time the property document was updated
    attr_accessor :updated

    # Gets the URL slug.
    attr_accessor :url_slug

    # Gets or sets the URL slug in short form
    attr_accessor :url_slug_short

    # The property zone.
    attr_accessor :zone

    # Canonical url for this property
    attr_accessor :canonical_url

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'cadastre_type' => :'cadastreType',
        :'on_market_types' => :'onMarketTypes',
        :'status' => :'status',
        :'address' => :'address',
        :'address_coordinate' => :'addressCoordinate',
        :'address_id' => :'addressId',
        :'adverts' => :'adverts',
        :'area_size' => :'areaSize',
        :'bathrooms' => :'bathrooms',
        :'bedrooms' => :'bedrooms',
        :'car_spaces' => :'carSpaces',
        :'claim' => :'claim',
        :'condition' => :'condition',
        :'created' => :'created',
        :'ensuites' => :'ensuites',
        :'features' => :'features',
        :'flat_number' => :'flatNumber',
        :'gnaf_ids' => :'gnafIds',
        :'history' => :'history',
        :'id' => :'id',
        :'improvements' => :'improvements',
        :'internal_area' => :'internalArea',
        :'is_residential' => :'isResidential',
        :'land_use' => :'landUse',
        :'lot_number' => :'lotNumber',
        :'photos' => :'photos',
        :'plan_number' => :'planNumber',
        :'postcode' => :'postcode',
        :'property_category' => :'propertyCategory',
        :'property_category_id' => :'propertyCategoryId',
        :'property_type' => :'propertyType',
        :'property_type_id' => :'propertyTypeId',
        :'rooms' => :'rooms',
        :'section_number' => :'sectionNumber',
        :'state' => :'state',
        :'storeys' => :'storeys',
        :'street_address' => :'streetAddress',
        :'street_name' => :'streetName',
        :'street_number' => :'streetNumber',
        :'street_type' => :'streetType',
        :'street_type_long' => :'streetTypeLong',
        :'suburb' => :'suburb',
        :'suburb_id' => :'suburbId',
        :'title' => :'title',
        :'updated' => :'updated',
        :'url_slug' => :'urlSlug',
        :'url_slug_short' => :'urlSlugShort',
        :'zone' => :'zone',
        :'canonical_url' => :'canonicalUrl'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'cadastre_type' => :'String',
        :'on_market_types' => :'Array<String>',
        :'status' => :'String',
        :'address' => :'String',
        :'address_coordinate' => :'DomainPublicAdapterWebApiModelsV1PropertiesGeoCoordinate',
        :'address_id' => :'Integer',
        :'adverts' => :'Array<DomainPublicAdapterWebApiModelsV1PropertiesAdvert>',
        :'area_size' => :'Integer',
        :'bathrooms' => :'Integer',
        :'bedrooms' => :'Integer',
        :'car_spaces' => :'Integer',
        :'claim' => :'DomainPublicAdapterWebApiModelsV1PropertiesClaimData',
        :'condition' => :'String',
        :'created' => :'DateTime',
        :'ensuites' => :'Integer',
        :'features' => :'Array<String>',
        :'flat_number' => :'String',
        :'gnaf_ids' => :'Array<DomainPublicAdapterWebApiModelsV1PropertiesGnafId>',
        :'history' => :'DomainPublicAdapterWebApiModelsV1PropertiesHistory',
        :'id' => :'String',
        :'improvements' => :'String',
        :'internal_area' => :'Integer',
        :'is_residential' => :'BOOLEAN',
        :'land_use' => :'String',
        :'lot_number' => :'String',
        :'photos' => :'Array<DomainPublicAdapterWebApiModelsV1PropertiesPhoto>',
        :'plan_number' => :'String',
        :'postcode' => :'String',
        :'property_category' => :'String',
        :'property_category_id' => :'Integer',
        :'property_type' => :'String',
        :'property_type_id' => :'Integer',
        :'rooms' => :'Integer',
        :'section_number' => :'String',
        :'state' => :'String',
        :'storeys' => :'Integer',
        :'street_address' => :'String',
        :'street_name' => :'String',
        :'street_number' => :'String',
        :'street_type' => :'String',
        :'street_type_long' => :'String',
        :'suburb' => :'String',
        :'suburb_id' => :'Integer',
        :'title' => :'String',
        :'updated' => :'DateTime',
        :'url_slug' => :'String',
        :'url_slug_short' => :'String',
        :'zone' => :'String',
        :'canonical_url' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'cadastreType')
        self.cadastre_type = attributes[:'cadastreType']
      end

      if attributes.has_key?(:'onMarketTypes')
        if (value = attributes[:'onMarketTypes']).is_a?(Array)
          self.on_market_types = value
        end
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.has_key?(:'address')
        self.address = attributes[:'address']
      end

      if attributes.has_key?(:'addressCoordinate')
        self.address_coordinate = attributes[:'addressCoordinate']
      end

      if attributes.has_key?(:'addressId')
        self.address_id = attributes[:'addressId']
      end

      if attributes.has_key?(:'adverts')
        if (value = attributes[:'adverts']).is_a?(Array)
          self.adverts = value
        end
      end

      if attributes.has_key?(:'areaSize')
        self.area_size = attributes[:'areaSize']
      end

      if attributes.has_key?(:'bathrooms')
        self.bathrooms = attributes[:'bathrooms']
      end

      if attributes.has_key?(:'bedrooms')
        self.bedrooms = attributes[:'bedrooms']
      end

      if attributes.has_key?(:'carSpaces')
        self.car_spaces = attributes[:'carSpaces']
      end

      if attributes.has_key?(:'claim')
        self.claim = attributes[:'claim']
      end

      if attributes.has_key?(:'condition')
        self.condition = attributes[:'condition']
      end

      if attributes.has_key?(:'created')
        self.created = attributes[:'created']
      end

      if attributes.has_key?(:'ensuites')
        self.ensuites = attributes[:'ensuites']
      end

      if attributes.has_key?(:'features')
        if (value = attributes[:'features']).is_a?(Array)
          self.features = value
        end
      end

      if attributes.has_key?(:'flatNumber')
        self.flat_number = attributes[:'flatNumber']
      end

      if attributes.has_key?(:'gnafIds')
        if (value = attributes[:'gnafIds']).is_a?(Array)
          self.gnaf_ids = value
        end
      end

      if attributes.has_key?(:'history')
        self.history = attributes[:'history']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'improvements')
        self.improvements = attributes[:'improvements']
      end

      if attributes.has_key?(:'internalArea')
        self.internal_area = attributes[:'internalArea']
      end

      if attributes.has_key?(:'isResidential')
        self.is_residential = attributes[:'isResidential']
      end

      if attributes.has_key?(:'landUse')
        self.land_use = attributes[:'landUse']
      end

      if attributes.has_key?(:'lotNumber')
        self.lot_number = attributes[:'lotNumber']
      end

      if attributes.has_key?(:'photos')
        if (value = attributes[:'photos']).is_a?(Array)
          self.photos = value
        end
      end

      if attributes.has_key?(:'planNumber')
        self.plan_number = attributes[:'planNumber']
      end

      if attributes.has_key?(:'postcode')
        self.postcode = attributes[:'postcode']
      end

      if attributes.has_key?(:'propertyCategory')
        self.property_category = attributes[:'propertyCategory']
      end

      if attributes.has_key?(:'propertyCategoryId')
        self.property_category_id = attributes[:'propertyCategoryId']
      end

      if attributes.has_key?(:'propertyType')
        self.property_type = attributes[:'propertyType']
      end

      if attributes.has_key?(:'propertyTypeId')
        self.property_type_id = attributes[:'propertyTypeId']
      end

      if attributes.has_key?(:'rooms')
        self.rooms = attributes[:'rooms']
      end

      if attributes.has_key?(:'sectionNumber')
        self.section_number = attributes[:'sectionNumber']
      end

      if attributes.has_key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.has_key?(:'storeys')
        self.storeys = attributes[:'storeys']
      end

      if attributes.has_key?(:'streetAddress')
        self.street_address = attributes[:'streetAddress']
      end

      if attributes.has_key?(:'streetName')
        self.street_name = attributes[:'streetName']
      end

      if attributes.has_key?(:'streetNumber')
        self.street_number = attributes[:'streetNumber']
      end

      if attributes.has_key?(:'streetType')
        self.street_type = attributes[:'streetType']
      end

      if attributes.has_key?(:'streetTypeLong')
        self.street_type_long = attributes[:'streetTypeLong']
      end

      if attributes.has_key?(:'suburb')
        self.suburb = attributes[:'suburb']
      end

      if attributes.has_key?(:'suburbId')
        self.suburb_id = attributes[:'suburbId']
      end

      if attributes.has_key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.has_key?(:'updated')
        self.updated = attributes[:'updated']
      end

      if attributes.has_key?(:'urlSlug')
        self.url_slug = attributes[:'urlSlug']
      end

      if attributes.has_key?(:'urlSlugShort')
        self.url_slug_short = attributes[:'urlSlugShort']
      end

      if attributes.has_key?(:'zone')
        self.zone = attributes[:'zone']
      end

      if attributes.has_key?(:'canonicalUrl')
        self.canonical_url = attributes[:'canonicalUrl']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      cadastre_type_validator = EnumAttributeValidator.new('String', ['Point', 'MultiPoint', 'LineString', 'MultiLineString', 'Polygon', 'MultiPolygon', 'GeometryCollection', 'Feature', 'FeatureCollection'])
      return false unless cadastre_type_validator.valid?(@cadastre_type)
      status_validator = EnumAttributeValidator.new('String', ['OffMarket', 'OnMarket'])
      return false unless status_validator.valid?(@status)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cadastre_type Object to be assigned
    def cadastre_type=(cadastre_type)
      validator = EnumAttributeValidator.new('String', ['Point', 'MultiPoint', 'LineString', 'MultiLineString', 'Polygon', 'MultiPolygon', 'GeometryCollection', 'Feature', 'FeatureCollection'])
      unless validator.valid?(cadastre_type)
        fail ArgumentError, 'invalid value for "cadastre_type", must be one of #{validator.allowable_values}.'
      end
      @cadastre_type = cadastre_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ['OffMarket', 'OnMarket'])
      unless validator.valid?(status)
        fail ArgumentError, 'invalid value for "status", must be one of #{validator.allowable_values}.'
      end
      @status = status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          cadastre_type == o.cadastre_type &&
          on_market_types == o.on_market_types &&
          status == o.status &&
          address == o.address &&
          address_coordinate == o.address_coordinate &&
          address_id == o.address_id &&
          adverts == o.adverts &&
          area_size == o.area_size &&
          bathrooms == o.bathrooms &&
          bedrooms == o.bedrooms &&
          car_spaces == o.car_spaces &&
          claim == o.claim &&
          condition == o.condition &&
          created == o.created &&
          ensuites == o.ensuites &&
          features == o.features &&
          flat_number == o.flat_number &&
          gnaf_ids == o.gnaf_ids &&
          history == o.history &&
          id == o.id &&
          improvements == o.improvements &&
          internal_area == o.internal_area &&
          is_residential == o.is_residential &&
          land_use == o.land_use &&
          lot_number == o.lot_number &&
          photos == o.photos &&
          plan_number == o.plan_number &&
          postcode == o.postcode &&
          property_category == o.property_category &&
          property_category_id == o.property_category_id &&
          property_type == o.property_type &&
          property_type_id == o.property_type_id &&
          rooms == o.rooms &&
          section_number == o.section_number &&
          state == o.state &&
          storeys == o.storeys &&
          street_address == o.street_address &&
          street_name == o.street_name &&
          street_number == o.street_number &&
          street_type == o.street_type &&
          street_type_long == o.street_type_long &&
          suburb == o.suburb &&
          suburb_id == o.suburb_id &&
          title == o.title &&
          updated == o.updated &&
          url_slug == o.url_slug &&
          url_slug_short == o.url_slug_short &&
          zone == o.zone &&
          canonical_url == o.canonical_url
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [cadastre_type, on_market_types, status, address, address_coordinate, address_id, adverts, area_size, bathrooms, bedrooms, car_spaces, claim, condition, created, ensuites, features, flat_number, gnaf_ids, history, id, improvements, internal_area, is_residential, land_use, lot_number, photos, plan_number, postcode, property_category, property_category_id, property_type, property_type_id, rooms, section_number, state, storeys, street_address, street_name, street_number, street_type, street_type_long, suburb, suburb_id, title, updated, url_slug, url_slug_short, zone, canonical_url].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = DomainClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
